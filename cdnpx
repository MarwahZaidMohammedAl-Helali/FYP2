import React, { useState, useRef, useEffect } from 'react';
import {
  Star, Award, Globe, Camera,
  Github, Linkedin, Twitter, Layout, Eye, EyeOff, Save, X,
  Plus, Code, Sparkles, Instagram,
  Layers, Wand2, Music, Palette,
  Box, Sliders, Square, Move, Grid,
  Cloud, Sun, Droplets,
  Stars, Snowflake, Timer, MessageCircle,
  Users, Trash2, Type, PaintBucket,
  ImageIcon, FileText, Activity, Smile, Grip,
  Lock, Unlock, Mail, Bold, Italic, Underline,
  AlignLeft, AlignCenter, AlignRight, AlignJustify,
  List, ListOrdered, Link, Image, Quote,
  Heading1, Heading2, Heading3, Minus, Plus as PlusIcon,
  ChevronUp, ChevronDown, Edit3, Settings,
  Columns, LayoutGrid, Maximize, Minimize,
  RotateCw, Copy, Clipboard, Download, Upload,
  Zap, Heart, Coffee, Target, TrendingUp,
  DollarSign, Calendar, Clock, MapPin, Phone,
  Youtube, Facebook, Briefcase, Book, Cpu,
  Database, Server, Smartphone, Monitor, Wifi,
  Circle, HelpCircle, GripVertical, Edit2, Pencil,
  Check, Sparkle, Brush, Share2, ExternalLink
} from 'lucide-react';

const Profile = () => {
  const [isCustomizing, setIsCustomizing] = useState(false);
  const [previewMode, setPreviewMode] = useState(false);
  const [selectedSection, setSelectedSection] = useState(null);
  const [customizationTab, setCustomizationTab] = useState('theme');
  const [editingField, setEditingField] = useState(null);
  const [selectedText, setSelectedText] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [showSaveNotification, setShowSaveNotification] = useState(false);
  const [expandedFAQs, setExpandedFAQs] = useState({});
  const customizationPanelRef = useRef(null);
  
  // Profile Theme State with enhanced options
  const [profileTheme, setProfileTheme] = useState({
    // Colors
    primaryColor: '#3b82f6',
    secondaryColor: '#60a5fa',
    borderColor: '#e5e7eb',
    backgroundColor: '#ffffff',
    headingColor: '#1e293b',
    paragraphColor: '#475569',
    // Typography
    fontFamily: '"Quicksand", sans-serif',
    headingFont: '"Playfair Display", serif',
    bodyFont: '"Merriweather", serif',
    // Style
    borderRadius: 'rounded',
    shadowStyle: 'subtle',
    // Effects
    glassEffect: false,
    neonEffect: false,
    gradientAngle: 135,
    particleEffect: 'none',
    // Layout
    layoutType: 'modern',
    spacing: 'normal',
    containerWidth: 'default',
    // Animations
    animations: true,
    hoverEffects: true,
    transitionSpeed: '0.3s',
    // New style options
    sectionSpacing: '2rem',
    contentDensity: 'comfortable',
    backgroundAnimation: false,
    animationType: 'hearts'
  });

  // Individual text styles with enhanced options
  const [textStyles, setTextStyles] = useState({});

  // Animation variants for sections
  const animationVariants = {
    fadeIn: {
      initial: { opacity: 0, y: 20 },
      animate: { opacity: 1, y: 0 },
      transition: { duration: 0.5 }
    },
    slideIn: {
      initial: { opacity: 0, x: -20 },
      animate: { opacity: 1, x: 0 },
      transition: { duration: 0.5 }
    },
    scaleIn: {
      initial: { opacity: 0, scale: 0.95 },
      animate: { opacity: 1, scale: 1 },
      transition: { duration: 0.5 }
    }
  };

  // Update text style for individual elements
  const updateTextStyle = (elementId, style) => {
    setTextStyles(prev => ({
      ...prev,
      [elementId]: { ...prev[elementId], ...style }
    }));
  };

  // Toggle FAQ expansion
  const toggleFAQ = (faqId, section) => {
    if (section.settings.collapsible) {
      setExpandedFAQs(prev => ({
        ...prev,
        [faqId]: !prev[faqId]
      }));
    }
  };

  // Enhanced background options
  const backgroundOptions = [
    { value: 'white', label: 'Pure White', preview: '⬜' },
    { value: 'transparent', label: 'Transparent', preview: '🔲' },
    { value: '#f8fafc', label: 'Cool Gray', preview: '🌫️' },
    { value: '#fefce8', label: 'Warm Cream', preview: '🌤️' },
    { value: '#f0fdf4', label: 'Mint Fresh', preview: '🌿' },
    { value: '#fdf4ff', label: 'Lavender Mist', preview: '💜' },
    { value: '#1e293b', label: 'Dark Slate', preview: '🌑' },
    { value: '#0f172a', label: 'Midnight Blue', preview: '🌌' },
    { value: 'gradient1', label: 'Ocean Breeze', preview: '🌊' },
    { value: 'gradient2', label: 'Sunset Glow', preview: '🌅' },
    { value: 'gradient3', label: 'Aurora', preview: '🌈' },
    { value: 'gradient4', label: 'Forest Dawn', preview: '🌲' },
    { value: 'gradient5', label: 'Cosmic Dream', preview: '🌠' },
    { value: 'gradient6', label: 'Cherry Blossom', preview: '🌸' },
    { value: 'pattern1', label: 'Subtle Dots', preview: '⚪' },
    { value: 'pattern2', label: 'Grid Lines', preview: '📐' },
    { value: 'pattern3', label: 'Waves', preview: '〰️' },
    { value: 'glass', label: 'Frosted Glass', preview: '🧊' },
    { value: 'mesh1', label: 'Mesh Gradient', preview: '🎨' },
    { value: 'animated1', label: 'Floating Bubbles', preview: '🫧' }
  ];

  // Helper to get background style with enhanced gradients
  const getBackgroundStyle = (background) => {
    const backgroundMap = {
      'gradient1': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      'gradient2': 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      'gradient3': 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
      'gradient4': 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
      'gradient5': 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',
      'gradient6': 'linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%)',
      'pattern1': `radial-gradient(circle, ${profileTheme.primaryColor}15 1px, transparent 1px)`,
      'pattern2': `linear-gradient(${profileTheme.primaryColor}05 1px, transparent 1px), linear-gradient(90deg, ${profileTheme.primaryColor}05 1px, transparent 1px)`,
      'pattern3': `radial-gradient(ellipse at top, ${profileTheme.primaryColor}10, transparent), radial-gradient(ellipse at bottom, ${profileTheme.secondaryColor}10, transparent)`,
      'glass': `rgba(255, 255, 255, 0.1)`,
      'mesh1': `radial-gradient(at 40% 20%, ${profileTheme.primaryColor}30 0px, transparent 50%), radial-gradient(at 80% 0%, ${profileTheme.secondaryColor}30 0px, transparent 50%), radial-gradient(at 0% 50%, ${profileTheme.accentColor}30 0px, transparent 50%)`,
      'animated1': `linear-gradient(45deg, ${profileTheme.primaryColor}10 25%, transparent 25%, transparent 75%, ${profileTheme.primaryColor}10 75%, ${profileTheme.primaryColor}10), linear-gradient(45deg, ${profileTheme.primaryColor}10 25%, transparent 25%, transparent 75%, ${profileTheme.primaryColor}10 75%, ${profileTheme.primaryColor}10)`
    };
    
    if (background === 'gradient') {
      return `linear-gradient(${profileTheme.gradientAngle}deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`;
    }
    
    return backgroundMap[background] || background;
  };

  // Enhanced Editable Field Component
  const EditableField = ({ value, onSave, style = {}, multiline = false, placeholder = "Click to edit", fieldId, icon }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [tempValue, setTempValue] = useState(value);
    const [isHovered, setIsHovered] = useState(false);
    const inputRef = useRef(null);
    const fieldStyles = textStyles[fieldId] || {};
    
    useEffect(() => {
      if (isEditing && inputRef.current) {
        inputRef.current.focus();
        if (inputRef.current.select) {
          inputRef.current.select();
        }
      }
    }, [isEditing]);

    const handleSave = () => {
      onSave(tempValue);
      setIsEditing(false);
      setEditingField(null);
      
      // Show save animation
      setShowSaveNotification(true);
      setTimeout(() => setShowSaveNotification(false), 2000);
    };

    const handleCancel = () => {
      setTempValue(value);
      setIsEditing(false);
      setEditingField(null);
    };

    const handleKeyDown = (e) => {
      if (e.key === 'Enter' && !multiline) {
        e.preventDefault();
        handleSave();
      } else if (e.key === 'Escape') {
        handleCancel();
      }
    };

    const combinedStyle = {
      ...style,
      ...fieldStyles,
      color: fieldStyles.color || style.color,
      textAlign: fieldStyles.textAlign || style.textAlign,
      border: fieldStyles.border || 'none',
      borderRadius: fieldStyles.borderRadius || '4px',
      padding: fieldStyles.padding || '4px 8px',
      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
      position: 'relative',
    };

    if (!isCustomizing || previewMode) {
      return <span style={combinedStyle}>{value || placeholder}</span>;
    }

    if (isEditing && editingField === fieldId) {
      return multiline ? (
        <textarea
          ref={inputRef}
          value={tempValue}
          onChange={(e) => setTempValue(e.target.value)}
          onBlur={handleSave}
          onKeyDown={handleKeyDown}
          style={{
            ...combinedStyle,
            width: '100%',
            border: `2px solid ${profileTheme.primaryColor}`,
            borderRadius: '8px',
            padding: '0.75rem',
            outline: 'none',
            resize: 'vertical',
            minHeight: '80px',
            background: 'rgba(255, 255, 255, 0.98)',
            color: '#1e293b',
            fontSize: style.fontSize || '1rem',
            fontFamily: style.fontFamily || profileTheme.bodyFont,
            boxShadow: `0 0 0 4px ${profileTheme.primaryColor}20`,
            animation: 'pulse 2s infinite'
          }}
        />
      ) : (
        <input
          ref={inputRef}
          type="text"
          value={tempValue}
          onChange={(e) => setTempValue(e.target.value)}
          onBlur={handleSave}
          onKeyDown={handleKeyDown}
          style={{
            ...combinedStyle,
            border: `2px solid ${profileTheme.primaryColor}`,
            borderRadius: '8px',
            padding: '0.5rem 0.75rem',
            outline: 'none',
            background: 'rgba(255, 255, 255, 0.98)',
            color: '#1e293b',
            width: '100%',
            boxShadow: `0 0 0 4px ${profileTheme.primaryColor}20`,
            animation: 'pulse 2s infinite'
          }}
        />
      );
    }

    return (
      <span
        onClick={() => {
          setIsEditing(true);
          setEditingField(fieldId);
          setSelectedText(fieldId);
        }}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        style={{
          ...combinedStyle,
          cursor: 'text',
          display: 'inline-flex',
          alignItems: 'center',
          gap: '0.5rem',
          background: isHovered ? `${profileTheme.primaryColor}05` : 'transparent',
          outline: selectedText === fieldId && isCustomizing ? `2px solid ${profileTheme.primaryColor}` : 'none',
          outlineOffset: '4px',
          transform: isHovered ? 'translateY(-1px)' : 'translateY(0)',
          boxShadow: isHovered ? '0 4px 12px rgba(0, 0, 0, 0.05)' : 'none',
        }}
        title="Click to edit"
      >
        {icon && <span style={{ opacity: 0.6 }}>{icon}</span>}
        {value || <span style={{ opacity: 0.5 }}>{placeholder}</span>}
        {isHovered && (
          <Edit2 
            size={14} 
            style={{ 
              opacity: 0.8,
              color: profileTheme.primaryColor,
              animation: 'bounce 1s infinite'
            }}
          />
        )}
      </span>
    );
  };

  // Sections State with enhanced content
  const [sections, setSections] = useState([
    {
      id: 'header',
      type: 'header',
      visible: true,
      locked: false,
      order: 0,
      animation: 'fadeIn',
      style: {
        padding: '4rem 2rem',
        margin: '0',
        background: 'gradient',
        borderRadius: 'inherit',
        textAlign: 'center'
      },
      settings: {
        showAvatar: true,
        avatarSize: 140,
        avatarShape: 'circle',
        avatarBorder: true,
        showName: true,
        showTitle: true,
        showStats: true,
        showSocial: true,
        layout: 'centered',
        statsLayout: 'grid'
      },
      content: {
        name: 'Alexandra Chen',
        title: 'Senior Product Designer',
        subtitle: 'Crafting delightful digital experiences',
        bio: 'Passionate about creating user-centered designs that make a difference',
        stats: [
          { label: 'Projects', value: '127', icon: '💼', trend: '+12%' },
          { label: 'Awards', value: '23', icon: '🏆', trend: '+5' },
          { label: 'Happy Clients', value: '89', icon: '😊', trend: '100%' },
          { label: 'Years Experience', value: '8+', icon: '⭐', trend: '' }
        ],
        social: [],
      }
    },
    {
      id: 'bio',
      type: 'bio',
      title: 'About Me',
      visible: true,
      locked: false,
      order: 1,
      animation: 'slideIn',
      style: {
        padding: '3rem',
        margin: '0 0 2rem 0',
        background: 'white',
        borderRadius: 'inherit'
      },
      settings: {
        showTitle: true,
        titleSize: 'h2',
        showQuote: true,
        showSkillTags: true,
        columns: 1,
        showReadMore: true
      },
      content: {
        text: `I'm a passionate designer with over 8 years of experience creating intuitive and beautiful digital experiences. My journey in design started with a fascination for how technology can improve people's lives.

I specialize in user interface design, design systems, and creating seamless user experiences. I believe that great design is not just about aesthetics, but about solving real problems and making technology accessible to everyone.

When I'm not designing, you can find me exploring new coffee shops, practicing photography, or contributing to open-source design projects.`,
      }
    }
   
  ]);

  // Custom Sections
  const [customSections, setCustomSections] = useState([]);

  // Enhanced font options with distinctive styles
  const fontOptions = [
    { value: '"Playfair Display", serif', label: 'Playfair Display', preview: 'Elegant & Editorial' },
    { value: '"Merriweather", serif', label: 'Merriweather', preview: 'Classic Serif' },
    { value: '"Oswald", sans-serif', label: 'Oswald', preview: 'Bold & Modern' },
    { value: '"Quicksand", sans-serif', label: 'Quicksand', preview: 'Soft & Friendly' },
    { value: '"Abril Fatface", display', label: 'Abril Fatface', preview: 'Dramatic Display' },
    { value: '"Crimson Pro", serif', label: 'Crimson Pro', preview: 'Refined Serif' },
    { value: '"Bebas Neue", sans-serif', label: 'Bebas Neue', preview: 'Strong Impact' },
    { value: '"Cormorant Garamond", serif', label: 'Cormorant', preview: 'Luxury Serif' }
  ];

  // Section types
  const sectionTypes = [
    { type: 'projects', name: 'Projects Gallery', icon: Grid, color: '#3b82f6' },
    { type: 'experience', name: 'Work Experience', icon: Briefcase, color: '#8b5cf6' },
    { type: 'education', name: 'Education', icon: Book, color: '#10b981' },
    { type: 'skills', name: '⚡ Skills', icon: Zap, color: '#06b6d4' },
    { type: 'achievements', name: 'Achievements', icon: Award, color: '#f59e0b' },
    { type: 'testimonials', name: '💬 Testimonials', icon: MessageCircle, color: '#ec4899' },
    { type: 'faq', name: 'FAQ Section', icon: HelpCircle, color: '#84cc16' },
  ];

  // Apply dark mode theme
  useEffect(() => {
    if (profileTheme.backgroundColor === '#1e293b' || profileTheme.backgroundColor === '#0f172a') {
      setProfileTheme(prev => ({
        ...prev,
        headingColor: '#f1f5f9',
        paragraphColor: '#cbd5e1'
      }));
    }
  }, [profileTheme.backgroundColor]);

  // Helper functions
  const updateSection = (sectionId, updates) => {
    if (sectionId.startsWith('custom-')) {
      setCustomSections(customSections.map(s =>
        s.id === sectionId ? { ...s, ...updates } : s
      ));
    } else {
      setSections(sections.map(s =>
        s.id === sectionId ? { ...s, ...updates } : s
      ));
    }
  };

  const updateSectionStyle = (sectionId, styleKey, value) => {
    const updateFn = (s) => s.id === sectionId ? {
      ...s,
      style: { ...s.style, [styleKey]: value }
    } : s;
    
    if (sectionId.startsWith('custom-')) {
      setCustomSections(customSections.map(updateFn));
    } else {
      setSections(sections.map(updateFn));
    }
  };

  const updateSectionSettings = (sectionId, settingKey, value) => {
    const updateFn = (s) => s.id === sectionId ? {
      ...s,
      settings: { ...s.settings, [settingKey]: value }
    } : s;
    
    if (sectionId.startsWith('custom-')) {
      setCustomSections(customSections.map(updateFn));
    } else {
      setSections(sections.map(updateFn));
    }
  };

  const updateSectionContent = (sectionId, contentKey, value) => {
    const updateFn = (s) => s.id === sectionId ? {
      ...s,
      content: { ...s.content, [contentKey]: value }
    } : s;
    
    if (sectionId.startsWith('custom-')) {
      setCustomSections(customSections.map(updateFn));
    } else {
      setSections(sections.map(updateFn));
    }
  };

  // Add custom section with enhanced defaults
  const addCustomSection = (type) => {
    const sectionType = sectionTypes.find(s => s.type === type);
    let newSection = {
      id: `custom-${Date.now()}`,
      type: type,
      title: sectionType.name,
      visible: true,
      locked: false,
      order: sections.length + customSections.length,
      animation: 'fadeIn',
      style: {
        padding: '3rem',
        margin: '0 0 2rem 0',
        background: 'white',
        borderRadius: 'inherit',
        textAlign: 'left'
      },
      settings: {
        showTitle: true,
        titleSize: 'h2',
        showSectionTitle: true
      },
      content: {}
    };

    // Enhanced content for each section type
    switch (type) {
      case 'projects':
        newSection.content = {
          projects: [
            { 
              id: Date.now() + 1,
              title: 'E-Commerce Redesign', 
              description: 'Complete overhaul of an online shopping platform, increasing conversion by 35%.', 
              date: '2024',
              image: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=600&h=400&fit=crop',
              url: 'https://example.com/project1',
            },
            { 
              id: Date.now() + 2,
              title: 'Banking App UI', 
              description: 'Modern banking application with focus on security and user experience.', 
              date: '2024',
              image: 'https://images.unsplash.com/photo-1563986768609-322da13575f3?w=600&h=400&fit=crop',
              url: 'https://example.com/project2',
            }
          ]
        };
        newSection.settings = { 
          layout: 'cards',
          showImages: true, 
          showDescription: true, 
          showDate: true,
          showTags: true,
          showMetrics: true,
          hoverEffect: 'lift'
        };
        break;
        
      case 'experience':
        newSection.content = {
          entries: [
            { 
              id: Date.now() + 1,
              title: 'Senior Product Designer', 
              company: 'Tech Innovations Inc.',
              location: 'San Francisco, CA',
              date: '2022 - Present', 
              description: 'Leading design initiatives for flagship products, managing a team of 5 designers.',
              achievements: [
                'Increased user engagement by 45% through redesign',
                'Established company-wide design system',
                'Mentored 3 junior designers'
              ],
              logo: '🏢'
            },
            { 
              id: Date.now() + 2,
              title: 'Product Designer', 
              company: 'StartupXYZ',
              location: 'Remote',
              date: '2020 - 2022', 
              description: 'Designed user experiences for mobile and web applications.',
            
              logo: '🚀'
            }
          ]
        };
        newSection.settings = { 
          showDates: true, 
          showLocation: true,
          showCompany: true,
          showAchievements: true,
          timeline: true
        };
        break;
        
      case 'education':
        newSection.content = {
          entries: [
            { 
              id: Date.now() + 1,
              degree: 'Master of Design', 
              field: 'Human-Computer Interaction',
              institution: 'Carnegie Mellon University',
              location: 'Pittsburgh, PA',
              date: '2020', 
              description: 'Focused on user research, interaction design, and design thinking.',
              gpa: '3.9/4.0',
              logo: '🎓'
            }
          ]
        };
        newSection.settings = { 
          showYear: true, 
          showLocation: true,
          showGPA: true,
          showHonors: true,
          showLogo: true
        };
        break;
        
      case 'achievements':
        newSection.content = {
          achievements: [
            { 
              id: Date.now() + 1,
              title: 'Design Excellence Award', 
              date: '2024', 
              description: 'Recognized for outstanding contribution to product design.',
              icon: 'trophy',
              issuer: 'International Design Association',
              link: 'https://example.com/award'
            },
            { 
              id: Date.now() + 2,
              title: 'Featured Speaker at Design Conference', 
              date: '2023', 
              description: 'Presented on "The Future of Design Systems" to 500+ attendees.',
              icon: 'mic',
              issuer: 'DesignCon 2023',
              link: 'https://example.com/talk'
            }
          ]
        };
        newSection.settings = { 
          layout: 'timeline',
          showDate: true,
          showDescription: true,
          showIssuer: true,
          showLink: true
        };
        break;
        
      case 'skills':
        newSection.content = {
          skills: [
            { 
              id: Date.now() + 1,
              name: 'React & JavaScript', 
              level: 90,
              category: 'Frontend',
              icon: '⚛️',
              description: 'Advanced proficiency in React, Redux, and modern JavaScript'
            },
            { 
              id: Date.now() + 2,
              name: 'UI/UX Design', 
              level: 85,
              category: 'Design',
              icon: '🎨',
              description: 'Expert in Figma, Adobe Creative Suite, and design systems'
            },
            { 
              id: Date.now() + 3,
              name: 'Node.js & APIs', 
              level: 80,
              category: 'Backend',
              icon: '🔧',
              description: 'Building scalable server-side applications and REST APIs'
            }
          ]
        };
        newSection.settings = { 
          layout: 'cards',
          showLevel: true,
          showCategory: true,
          showIcon: true,
          showDescription: true,
          skillBarStyle: 'modern'
        };
        break;
        
      case 'testimonials':
        newSection.content = {
          testimonials: [
            { 
              id: Date.now() + 1,
              name: 'Sarah Johnson',
              role: 'Product Manager',
              company: 'TechCorp',
              image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',
              content: 'Exceptional work quality and attention to detail. Delivered beyond expectations and was a pleasure to work with.',
              rating: 5,
              date: '2024'
            },
            { 
              id: Date.now() + 2,
              name: 'Michael Chen',
              role: 'CEO',
              company: 'StartupXYZ',
              image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
              content: 'Transformed our entire user experience. The redesign resulted in a 40% increase in user engagement.',
              rating: 5,
              date: '2024'
            }
          ]
        };
        newSection.settings = { 
          layout: 'carousel',
          showRating: true,
          showDate: true,
          showCompany: true,
          showImage: true,
          autoplay: false
        };
        break;
        
      case 'faq':
        newSection.content = {
          faqs: [
            { 
              id: Date.now() + 1,
              question: 'What is your design process?', 
              answer: 'I follow a user-centered design process that includes research, ideation, prototyping, testing, and iteration. I believe in close collaboration with stakeholders throughout the process.',
            },
            { 
              id: Date.now() + 2,
              question: 'Do you work with international clients?', 
              answer: 'Yes! I work with clients globally and am experienced in remote collaboration across different time zones.',
            }
          ]
        };
        newSection.settings = { 
          collapsible: true,
          showCategories: true,
          layout: 'accordion'
        };
        break;
        
      default:
        break;
    }
    
    setCustomSections([...customSections, newSection]);
    
    // Scroll to the new section after it's added
    setTimeout(() => {
      const sectionElement = document.getElementById(`section-${newSection.id}`);
      if (sectionElement) {
        sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }, 100);
    setSelectedSection(newSection.id);
    setCustomizationTab('editor');
  };

  const removeSection = (sectionId) => {
    setCustomSections(customSections.filter(s => s.id !== sectionId));
    if (selectedSection === sectionId) {
      setSelectedSection(null);
    }
  };

  const moveSection = (sectionId, direction) => {
    const allSections = [...sections, ...customSections].sort((a, b) => a.order - b.order);
    const currentIndex = allSections.findIndex(s => s.id === sectionId);
    
    if (currentIndex === -1) return;
    
    const newIndex = direction === 'up'
      ? Math.max(0, currentIndex - 1)
      : Math.min(allSections.length - 1, currentIndex + 1);
    
    if (currentIndex === newIndex) return;
    
    // Prevent moving sections above header (order 0) and bio (order 1)
    const currentSection = allSections[currentIndex];
    const targetSection = allSections[newIndex];
    
    // Don't allow any section to move above bio (order 1)
    if (direction === 'up' && targetSection.order <= 1) return;
    
    // Don't allow header or bio to be moved down
    if ((currentSection.id === 'header' || currentSection.id === 'bio') && direction === 'down') return;
    
    // Swap the sections
    [allSections[currentIndex], allSections[newIndex]] = [allSections[newIndex], allSections[currentIndex]];
    
    // Reassign order values
    allSections.forEach((section, index) => {
      section.order = index;
    });
    
    // Update both arrays
    const updatedSections = allSections.filter(s => !s.id.startsWith('custom-'));
    const updatedCustomSections = allSections.filter(s => s.id.startsWith('custom-'));
    
    setSections(updatedSections);
    setCustomSections(updatedCustomSections);
  };

  // Handle image upload with preview
  const handleProjectImageUpload = (sectionId, projectId, event) => {
    const file = event.target.files[0];
    if (file) {
      if (file.size > 5000000) {
        alert('Image size should be less than 5MB');
        return;
      }
      
      const reader = new FileReader();
      reader.onloadend = () => {
        const currentSection = [...sections, ...customSections].find(s => s.id === sectionId);
        if (currentSection) {
          const projects = [...currentSection.content.projects];
          const projectIndex = projects.findIndex(p => p.id === projectId);
          if (projectIndex !== -1) {
            projects[projectIndex].image = reader.result;
            updateSectionContent(sectionId, 'projects', projects);
          }
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const handleAvatarUpload = (sectionId, event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        updateSectionContent(sectionId, 'avatar', reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // Enhanced Section Component
  const Section = ({ section, isEditing }) => {
    const [isHovered, setIsHovered] = useState(false);
    const isDark = profileTheme.backgroundColor === '#1e293b' || profileTheme.backgroundColor === '#0f172a';
    
    const renderSectionTitle = () => {
      if (!section.settings.showTitle) return null;
      return (
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: '0.75rem',
          marginBottom: '1.5rem'
        }}>
          <h2 style={{
            fontSize: '1.5rem',
            fontWeight: '600',
            color: profileTheme.headingColor,
            margin: 0,
            fontFamily: profileTheme.headingFont
          }}>
            {isEditing ? (
              <EditableField
                value={section.title}
                onSave={(value) => updateSection(section.id, { title: value })}
                style={{
                  fontSize: '1.5rem',
                  fontWeight: '600',
                  color: profileTheme.headingColor
                }}
              />
            ) : section.title}
          </h2>
          {section.type === 'skills' && <Sparkle size={20} color={profileTheme.primaryColor} />}
          {section.type === 'experience' && <Briefcase size={20} color={profileTheme.primaryColor} />}
          {section.type === 'education' && <Book size={20} color={profileTheme.primaryColor} />}
          {section.type === 'projects' && <Code size={20} color={profileTheme.primaryColor} />}
          {section.type === 'achievements' && <Award size={20} color={profileTheme.primaryColor} />}
          {section.type === 'testimonials' && <MessageCircle size={20} color={profileTheme.primaryColor} />}
          {section.type === 'contact' && <Mail size={20} color={profileTheme.primaryColor} />}
        </div>
      );
    };
    
    const sectionStyle = {
      background: section.type === 'header'
        ? (section.style.background === 'gradient'
            ? `linear-gradient(${profileTheme.gradientAngle}deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`
            : getBackgroundStyle(section.style.background))
        : getBackgroundStyle(section.style.background),
      backgroundSize: section.style.background?.includes('pattern') ? '20px 20px' : 
                      section.style.background?.includes('mesh') ? '100% 100%' : 'cover',
      backdropFilter: (profileTheme.glassEffect || section.style.background === 'glass') ? 'blur(20px)' : 'none',
      borderRadius: '20px',
      padding: section.type === 'header' ? '2rem' : '2.5rem',
      margin: section.type === 'header' ? '0 0 2rem 0' : '0 0 1.5rem 0',
      textAlign: section.style.textAlign,
      boxShadow: selectedSection === section.id && isEditing 
        ? `0 0 0 3px ${profileTheme.primaryColor}, 0 10px 40px rgba(0,0,0,0.08)`
        : '0 4px 20px rgba(0,0,0,0.06), 0 1px 3px rgba(0,0,0,0.1)',
      position: 'relative',
      transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
      opacity: section.visible ? 1 : 0.3,
      transform: isHovered && profileTheme.hoverEffects ? 'translateY(-4px)' : 'translateY(0)',
      overflow: 'hidden',
      border: '1px solid rgba(255,255,255,0.1)',
      fontFamily: profileTheme.bodyFont,
      // Mobile responsiveness
      '@media (max-width: 768px)': {
        padding: section.type === 'header' ? '1.5rem' : '2rem',
        margin: '0 0 1rem 0',
        borderRadius: '16px'
      },
      ...(section.animation && profileTheme.animations && animationVariants[section.animation].animate)
    };

    const renderSectionContent = () => {
      const sectionTitle = section.settings.showTitle && (
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: '0.75rem',
          marginBottom: '1.5rem'
        }}>
          <h2 style={{
            fontSize: '1.5rem',
            fontWeight: '600',
            color: profileTheme.headingColor,
            margin: 0,
            fontFamily: profileTheme.headingFont
          }}>
            {isEditing ? (
              <EditableField
                value={section.title}
                onSave={(value) => updateSection(section.id, { title: value })}
                style={{
                  fontSize: '1.5rem',
                  fontWeight: '600',
                  color: profileTheme.headingColor
                }}
              />
            ) : section.title}
          </h2>
          {section.type === 'skills' && <Sparkle size={20} color={profileTheme.primaryColor} />}
          {section.type === 'experience' && <Briefcase size={20} color={profileTheme.primaryColor} />}
          {section.type === 'education' && <Book size={20} color={profileTheme.primaryColor} />}
          {section.type === 'projects' && <Code size={20} color={profileTheme.primaryColor} />}
          {section.type === 'achievements' && <Award size={20} color={profileTheme.primaryColor} />}
          {section.type === 'testimonials' && <MessageCircle size={20} color={profileTheme.primaryColor} />}
          {section.type === 'contact' && <Mail size={20} color={profileTheme.primaryColor} />}
        </div>
      );

      switch (section.type) {
        case 'header':
          return (
            <div style={{
              display: 'flex',
              flexDirection: window.innerWidth <= 768 ? 'column' : 'row',
              alignItems: 'center',
              gap: window.innerWidth <= 768 ? '1.5rem' : '2rem',
              padding: window.innerWidth <= 768 ? '1.5rem' : (isCustomizing ? '2rem' : '2.5rem'),
              background: isDark ? 'rgba(255,255,255,0.02)' : 'rgba(255,255,255,0.9)',
              borderRadius: '20px',
              justifyContent: window.innerWidth <= 768 ? 'center' : 'flex-start',
              border: `1px solid ${isDark ? 'rgba(255,255,255,0.08)' : 'rgba(0,0,0,0.06)'}`,
              backdropFilter: 'blur(20px)',
              textAlign: window.innerWidth <= 768 ? 'center' : 'left'
            }}>
              {section.settings.showAvatar && (
                <div style={{ position: 'relative' }}>
                  <div style={{
                    width: `${Math.min(section.settings.avatarSize, isCustomizing ? 80 : 120)}px`,
                    height: `${Math.min(section.settings.avatarSize, isCustomizing ? 80 : 120)}px`,
                    borderRadius: section.settings.avatarShape === 'circle' ? '50%'
                      : section.settings.avatarShape === 'square' ? '8px'
                        : '16px',
                    background: section.content.avatar 
                      ? `url(${section.content.avatar})`
                      : isDark 
                        ? `linear-gradient(135deg, ${profileTheme.primaryColor}dd, ${profileTheme.secondaryColor}dd)`
                        : `linear-gradient(135deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: `${Math.min(section.settings.avatarSize, 120) / 3}px`,
                    fontWeight: '600',
                    color: 'white',
                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.12)',
                    border: section.settings.avatarBorder ? `2px solid ${isDark ? 'rgba(255,255,255,0.1)' : 'rgba(255,255,255,0.8)'}` : 'none'
                  }}>
                    {!section.content.avatar && 'AC'}
                  </div>
                  {isEditing && (
                    <>
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => handleAvatarUpload(section.id, e)}
                        style={{ display: 'none' }}
                        id="avatar-upload"
                      />
                      <label htmlFor="avatar-upload">
                        <button
                          style={{
                            position: 'absolute',
                            bottom: '8px',
                            right: '8px',
                            background: profileTheme.accentColor,
                            color: 'white',
                            border: 'none',
                            borderRadius: '50%',
                            width: '32px',
                            height: '32px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            cursor: 'pointer',
                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
                            transition: 'all 0.2s ease',
                            opacity: 0.9
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.opacity = '1';
                            e.currentTarget.style.transform = 'scale(1.05)';
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.opacity = '0.9';
                            e.currentTarget.style.transform = 'scale(1)';
                          }}
                          onClick={() => document.getElementById('avatar-upload').click()}
                          type="button"
                        >
                          <Camera size={16} />
                        </button>
                      </label>
                    </>
                  )}
                </div>
              )}
              
              <div style={{
                flex: 1,
                textAlign: 'left'
              }}>
                {section.settings.showName && (
                  <EditableField
                    value={section.content.name}
                    onSave={(value) => updateSectionContent(section.id, 'name', value)}
                    fieldId={`${section.id}-name`}
                    style={{
                      fontSize: '2.5rem',
                      fontWeight: '600',
                      margin: '0 0 0.5rem 0',
                      color: profileTheme.headingColor,
                      fontFamily: profileTheme.headingFont,
                      display: 'block',
                      letterSpacing: '-0.01em',
                      lineHeight: '1.2'
                    }}
                  />
                )}
                
                {section.settings.showTitle && (
                  <EditableField
                    value={section.content.title}
                    onSave={(value) => updateSectionContent(section.id, 'title', value)}
                    fieldId={`${section.id}-title`}
                    style={{
                      fontSize: '1.25rem',
                      margin: '0 0 1rem 0',
                      color: profileTheme.primaryColor,
                      fontFamily: profileTheme.bodyFont,
                      display: 'block',
                      fontWeight: '400',
                      opacity: 0.8
                    }}
                  />
                )}
                
                {section.content.subtitle && (
                  <EditableField
                    value={section.content.subtitle}
                    onSave={(value) => updateSectionContent(section.id, 'subtitle', value)}
                    fieldId={`${section.id}-subtitle`}
                    style={{
                      fontSize: '1rem',
                      margin: '0 0 2rem 0',
                      color: profileTheme.paragraphColor,
                      fontFamily: profileTheme.bodyFont,
                      display: 'block',
                      maxWidth: '600px',
                      lineHeight: '1.6',
                      opacity: 0.7
                    }}
                  />
                )}

                {section.content.availability && (
                  <div style={{
                    display: 'inline-flex',
                    alignItems: 'center',
                    gap: '0.75rem',
                    padding: '0.75rem 1.5rem',
                    background: 'rgba(34, 197, 94, 0.06)',
                    borderRadius: '8px',
                    color: '#16a34a',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    marginBottom: '2rem',
                    border: `1px solid rgba(34, 197, 94, 0.15)`
                  }}>
                    <div style={{
                      width: '6px',
                      height: '6px',
                      borderRadius: '50%',
                      background: '#16a34a'
                    }} />
                    {section.content.availability}
                  </div>
                )}
                
                {section.settings.showStats && (
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: section.settings.statsLayout === 'grid' 
                      ? `repeat(${Math.min(section.content.stats.length, 4)}, 1fr)`
                      : '1fr',
                    gap: '1rem',
                    marginTop: '1.5rem',
                    marginBottom: section.settings.showSocial ? '2rem' : '0'
                  }}>
                    {section.content.stats.map((stat, i) => (
                      <div key={i} style={{
                        textAlign: 'center',
                        padding: '1.5rem 1rem',
                        background: isDark ? 'rgba(255,255,255,0.04)' : 'rgba(0,0,0,0.02)',
                        borderRadius: '12px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.08)' : 'rgba(0,0,0,0.06)'}`,
                        transition: 'all 0.2s ease'
                      }}>
                        <div style={{
                          fontSize: '1.875rem',
                          fontWeight: '600',
                          color: profileTheme.primaryColor,
                          marginBottom: '0.5rem'
                        }}>
                          {stat.value}
                          {stat.trend && (
                            <span style={{
                              fontSize: '0.75rem',
                              color: '#10b981',
                              marginLeft: '0.5rem',
                              fontWeight: '500'
                            }}>
                              {stat.trend}
                            </span>
                          )}
                        </div>
                        <div style={{
                          fontSize: '0.875rem',
                          color: profileTheme.paragraphColor,
                          opacity: 0.7,
                          fontWeight: '400'
                        }}>
                          {stat.label}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                {section.settings.showSocial && section.content.social && (
                  <div style={{
                    display: 'flex',
                    gap: '0.75rem',
                    flexWrap: 'wrap',
                    justifyContent: section.settings.layout === 'centered' ? 'center' : 'flex-start'
                  }}>
                    {section.content.social.map((social, i) => {
                      const Icon = {
                        github: Github,
                        linkedin: Linkedin,
                        twitter: Twitter,
                        instagram: Instagram,
                        facebook: Facebook,
                        youtube: Youtube
                      }[social.platform] || Globe;
                      
                      return (
                        <a
                          key={i}
                          href={social.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '0.5rem',
                            padding: '0.75rem 1rem',
                            borderRadius: '8px',
                            background: isDark ? 'rgba(255,255,255,0.06)' : 'rgba(0,0,0,0.04)',
                            color: profileTheme.primaryColor,
                            textDecoration: 'none',
                            transition: 'all 0.2s ease',
                            border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.08)'}`,
                            fontSize: '0.875rem',
                            fontWeight: '500',
                            opacity: 0.8
                          }}
                          onMouseOver={(e) => {
                            e.currentTarget.style.opacity = '1';
                            e.currentTarget.style.background = profileTheme.primaryColor;
                            e.currentTarget.style.color = 'white';
                          }}
                          onMouseOut={(e) => {
                            e.currentTarget.style.opacity = '0.8';
                            e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.06)' : 'rgba(0,0,0,0.04)';
                            e.currentTarget.style.color = profileTheme.primaryColor;
                          }}
                        >
                          <Icon size={16} />
                          {social.followers && <span>{social.followers}</span>}
                        </a>
                      );
                    })}
                  </div>
                )}
              </div>
            </div>
          );
          
        case 'bio':
          return (
            <>
              {section.settings.showTitle && (
                <h2 style={{
                  fontSize: '2rem',
                  fontWeight: '700',
                  marginBottom: '2rem',
                  color: profileTheme.headingColor,
                  fontFamily: profileTheme.headingFont,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.75rem'
                }}>
                  <span style={{
                    width: '4px',
                    height: '32px',
                    background: profileTheme.primaryColor,
                    borderRadius: '2px'
                  }} />
                  {section.title}
                </h2>
              )}
              
              {section.settings.showQuote && section.content.quote && (
                <div style={{
                  fontSize: '1.25rem',
                  fontStyle: 'italic',
                  color: profileTheme.primaryColor,
                  marginBottom: '2rem',
                  padding: '1.5rem',
                  background: `${profileTheme.primaryColor}05`,
                  borderLeft: `4px solid ${profileTheme.primaryColor}`,
                  borderRadius: '8px',
                  position: 'relative'
                }}>
                  <Quote size={24} style={{
                    position: 'absolute',
                    top: '-12px',
                    left: '20px',
                    background: section.style.background || 'white',
                    padding: '0 8px',
                    color: profileTheme.primaryColor
                  }} />
                  {section.content.quote}
                </div>
              )}
              
              <EditableField
                value={section.content.text}
                onSave={(value) => updateSectionContent(section.id, 'text', value)}
                fieldId={`${section.id}-text`}
                multiline={true}
                style={{
                  color: profileTheme.paragraphColor,
                  fontFamily: profileTheme.bodyFont,
                  display: 'block',
                  lineHeight: '1.8',
                  fontSize: '1.0625rem',
                  whiteSpace: 'pre-wrap'
                }}
              />
              
              {section.settings.showSkillTags && section.content.skills && (
                <div style={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  gap: '0.75rem',
                  marginTop: '2rem'
                }}>
                  {section.content.skills.map((skill, i) => (
                    <span key={i} style={{
                      padding: '0.5rem 1rem',
                      background: `${profileTheme.primaryColor}10`,
                      color: profileTheme.primaryColor,
                      borderRadius: '100px',
                      fontSize: '0.875rem',
                      fontWeight: '500',
                      border: `1px solid ${profileTheme.primaryColor}20`,
                      transition: 'all 0.3s ease',
                      cursor: 'default'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = profileTheme.primaryColor;
                      e.currentTarget.style.color = 'white';
                      e.currentTarget.style.transform = 'translateY(-2px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = `${profileTheme.primaryColor}10`;
                      e.currentTarget.style.color = profileTheme.primaryColor;
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}>
                      {skill}
                    </span>
                  ))}
                </div>
              )}
            </>
          );
          
        case 'skills':
          const SkillCard = ({ skill }) => (
            <div style={{
              padding: '1.5rem',
              background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
              borderRadius: '16px',
              border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)'}`,
              transition: 'all 0.3s ease',
              display: 'flex',
              alignItems: 'flex-start',
              gap: '1.25rem',
              position: 'relative',
              overflow: 'hidden'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)';
              e.currentTarget.style.boxShadow = '0 8px 16px rgba(0,0,0,0.1)';
              e.currentTarget.style.borderColor = profileTheme.primaryColor;
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = 'none';
              e.currentTarget.style.borderColor = isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb';
            }}>
              {section.settings.showIcon && (
                <div 
                  style={{
                    width: '48px',
                    height: '48px',
                    background: `linear-gradient(135deg, ${profileTheme.primaryColor}20, ${profileTheme.secondaryColor}20)`,
                    borderRadius: '12px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '1.75rem',
                    cursor: isEditing ? 'pointer' : 'default'
                  }}
                  onClick={() => {
                    if (isEditing) {
                      const icons = ['⚡', '🎯', '💡', '🚀', '🎨', '💻', '📱', '🔧', '📊', '🎮', '🎬', '📝'];
                      const currentIndex = icons.indexOf(skill.icon);
                      const nextIcon = icons[(currentIndex + 1) % icons.length];
                      const updatedSkills = section.content.skills.map(s => 
                        s.id === skill.id ? { ...s, icon: nextIcon } : s
                      );
                      updateSectionContent(section.id, 'skills', updatedSkills);
                    }
                  }}
                >
                  {skill.icon}
                </div>
              )}
              <div style={{ flex: 1 }}>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  gap: '1rem',
                  flexWrap: 'wrap'
                }}>
                  <h3 style={{
                    fontSize: '1.125rem',
                    fontWeight: '600',
                    color: profileTheme.headingColor,
                    margin: 0,
                    lineHeight: '1.4'
                  }}>
                    {isEditing ? (
                      <EditableField
                        value={skill.name}
                        onSave={(value) => {
                          const updatedSkills = section.content.skills.map(s => 
                            s.id === skill.id ? { ...s, name: value } : s
                          );
                          updateSectionContent(section.id, 'skills', updatedSkills);
                        }}
                        style={{ fontSize: '1.125rem', fontWeight: '600', color: profileTheme.headingColor }}
                      />
                    ) : skill.name}
                  </h3>
                  <div 
                    style={{
                      padding: '0.25rem 0.75rem',
                      background: `${profileTheme.primaryColor}10`,
                      color: profileTheme.primaryColor,
                      borderRadius: '100px',
                      fontSize: '0.75rem',
                      fontWeight: '500',
                      cursor: isEditing ? 'pointer' : 'default'
                    }}
                    onClick={() => {
                      if (isEditing) {
                        const categories = ['Frontend', 'Backend', 'Design', 'DevOps', 'Mobile', 'Database', 'AI/ML', 'Other'];
                        const currentIndex = categories.indexOf(skill.category);
                        const nextCategory = categories[(currentIndex + 1) % categories.length];
                        const updatedSkills = section.content.skills.map(s => 
                          s.id === skill.id ? { ...s, category: nextCategory } : s
                        );
                        updateSectionContent(section.id, 'skills', updatedSkills);
                      }
                    }}
                  >
                    {skill.category}
                  </div>
                </div>
                <div style={{
                  margin: '0.5rem 0 0 0',
                  fontSize: '0.875rem',
                  color: profileTheme.paragraphColor,
                  opacity: 0.8,
                  lineHeight: '1.5'
                }}>
                  {isEditing ? (
                    <EditableField
                      value={skill.description}
                      onSave={(value) => {
                        const updatedSkills = section.content.skills.map(s => 
                          s.id === skill.id ? { ...s, description: value } : s
                        );
                        updateSectionContent(section.id, 'skills', updatedSkills);
                      }}
                      style={{ fontSize: '0.875rem', color: profileTheme.paragraphColor }}
                      multiline={true}
                    />
                  ) : skill.description}
                </div>
              </div>
              {isEditing && (
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={() => {
                      const updatedSkills = section.content.skills.filter(s => s.id !== skill.id);
                      updateSectionContent(section.id, 'skills', updatedSkills);
                    }}
                    style={{
                      background: '#fee2e2',
                      border: 'none',
                      borderRadius: '6px',
                      padding: '0.5rem',
                      cursor: 'pointer',
                      color: '#dc2626',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      transition: 'all 0.2s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'scale(1.1)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'scale(1)';
                    }}
                  >
                    <Trash2 size={16} />
                  </button>
                </div>
              )}
            </div>
          );
          
          return (
            <>
              {sectionTitle}
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: '1rem'
              }}>
                {isEditing && (
                  <button
                    onClick={() => {
                      const newSkill = {
                        id: Date.now(),
                        name: 'New Skill',
                        icon: '⚡',
                        category: 'Category',
                        description: 'Click to edit description'
                      };
                      const updatedSkills = [...section.content.skills, newSkill];
                      updateSectionContent(section.id, 'skills', updatedSkills);
                    }}
                    style={{
                      background: profileTheme.primaryColor,
                      color: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      padding: '0.75rem 1.25rem',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem',
                      cursor: 'pointer',
                      fontSize: '0.875rem',
                      fontWeight: '500',
                      transition: 'all 0.2s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = 'none';
                    }}
                  >
                    <Plus size={16} /> Add Skill
                  </button>
                )}
              </div>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                gap: '1rem'
              }}>
                {section.content.skills.map((skill, i) => (
                  <SkillCard key={skill.id || i} skill={skill} />
                ))}
              </div>
            </>
          );
          
        case 'projects':
          return (
            <>
              {sectionTitle}
              
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: section.settings.layout === 'list' 
                  ? '1fr'
                  : window.innerWidth <= 768 
                    ? '1fr' 
                    : 'repeat(auto-fit, minmax(340px, 1fr))', 
                gap: window.innerWidth <= 768 ? '1.5rem' : '2rem' 
              }}>
                {section.content.projects.map((project) => (
                  <div key={project.id} style={{ 
                    borderRadius: '16px', 
                    overflow: 'hidden', 
                    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',
                    background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                    cursor: 'pointer',
                    position: 'relative',
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column'
                  }}
                  onMouseOver={(e) => {
                    if (section.settings.hoverEffect === 'lift' && profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(-8px) scale(1.02)';
                      e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.15)';
                    }
                  }}
                  onMouseOut={(e) => {
                    if (section.settings.hoverEffect === 'lift' && profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(0) scale(1)';
                      e.currentTarget.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.08)';
                    }
                  }}>
                    {section.settings.showImages && project.image && (
                      <div style={{ 
                        position: 'relative', 
                        paddingTop: '60%',
                        overflow: 'hidden',
                        background: '#f3f4f6'
                      }}>
                        <img 
                          src={project.image} 
                          alt={project.title} 
                          style={{ 
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            width: '100%', 
                            height: '100%', 
                            objectFit: 'cover',
                            transition: 'transform 0.4s ease'
                          }}
                          onMouseEnter={(e) => {
                            if (profileTheme.hoverEffects) {
                              e.currentTarget.style.transform = 'scale(1.05)';
                            }
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.transform = 'scale(1)';
                          }}
                        />
                        {isEditing && (
                          <label style={{
                            position: 'absolute',
                            bottom: '12px',
                            right: '12px',
                            background: 'rgba(0, 0, 0, 0.8)',
                            color: 'white',
                            padding: '0.5rem 1rem',
                            borderRadius: '8px',
                            cursor: 'pointer',
                            fontSize: '0.875rem',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '0.5rem',
                            backdropFilter: 'blur(10px)',
                            transition: 'all 0.3s ease'
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.background = profileTheme.primaryColor;
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.background = 'rgba(0, 0, 0, 0.8)';
                          }}>
                            <Upload size={16} />
                            Change Image
                            <input
                              type="file"
                              accept="image/*"
                              onChange={(e) => handleProjectImageUpload(section.id, project.id, e)}
                              style={{ display: 'none' }}
                            />
                          </label>
                        )}
                      </div>
                    )}
                    
                    <div style={{ 
                      padding: '1.75rem',
                      flex: 1,
                      display: 'flex',
                      flexDirection: 'column'
                    }}>
                      <div style={{ flex: 1 }}>
                        <div style={{
                          display: 'flex',
                          justifyContent: 'space-between',
                          alignItems: 'flex-start',
                          marginBottom: '0.75rem'
                        }}>
                          <EditableField
                            value={project.title}
                            onSave={(value) => {
                              const projects = [...section.content.projects];
                              const index = projects.findIndex(p => p.id === project.id);
                              projects[index].title = value;
                              updateSectionContent(section.id, 'projects', projects);
                            }}
                            fieldId={`project-${project.id}-title`}
                            style={{ 
                              fontSize: '1.25rem',
                              fontWeight: '700',
                              color: profileTheme.headingColor, 
                              fontFamily: profileTheme.headingFont,
                              display: 'block',
                              lineHeight: '1.3'
                            }}
                          />
                          {section.settings.showDate && (
                            <EditableField
                              value={project.date}
                              onSave={(value) => {
                                const projects = [...section.content.projects];
                                const index = projects.findIndex(p => p.id === project.id);
                                projects[index].date = value;
                                updateSectionContent(section.id, 'projects', projects);
                              }}
                              fieldId={`project-${project.id}-date`}
                              style={{ 
                                fontSize: '0.875rem', 
                                opacity: 0.7, 
                                color: profileTheme.paragraphColor, 
                                fontFamily: profileTheme.bodyFont,
                                whiteSpace: 'nowrap'
                              }}
                            />
                          )}
                        </div>
                        
                        {section.settings.showDescription && (
                          <EditableField
                            value={project.description}
                            onSave={(value) => {
                              const projects = [...section.content.projects];
                              const index = projects.findIndex(p => p.id === project.id);
                              projects[index].description = value;
                              updateSectionContent(section.id, 'projects', projects);
                            }}
                            fieldId={`project-${project.id}-desc`}
                            multiline={true}
                            style={{ 
                              fontSize: '0.9375rem', 
                              color: profileTheme.paragraphColor, 
                              fontFamily: profileTheme.bodyFont,
                              display: 'block',
                              marginBottom: '1rem',
                              lineHeight: '1.6'
                            }}
                          />
                        )}
                        
                        {section.settings.showTags && project.tags && (
                          <div style={{
                            display: 'flex',
                            flexWrap: 'wrap',
                            gap: '0.5rem',
                            marginBottom: '1rem'
                          }}>
                            {project.tags.map((tag, i) => (
                              <span key={i} style={{
                                padding: '0.25rem 0.75rem',
                                background: `${profileTheme.primaryColor}10`,
                                color: profileTheme.primaryColor,
                                borderRadius: '100px',
                                fontSize: '0.75rem',
                                fontWeight: '500'
                              }}>
                                {tag}
                              </span>
                            ))}
                          </div>
                        )}
                        
                        {section.settings.showMetrics && project.metrics && (
                          <div style={{
                            display: 'flex',
                            gap: '1.5rem',
                            marginBottom: '1rem',
                            paddingTop: '1rem',
                            borderTop: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#f3f4f6'}`
                          }}>
                            {Object.entries(project.metrics).map(([key, value]) => (
                              <div key={key}>
                                <div style={{
                                  fontSize: '1.125rem',
                                  fontWeight: '700',
                                  color: profileTheme.primaryColor
                                }}>
                                  {value}
                                </div>
                                <div style={{
                                  fontSize: '0.75rem',
                                  color: profileTheme.paragraphColor,
                                  textTransform: 'capitalize'
                                }}>
                                  {key}
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                      
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        alignItems: 'center',
                        marginTop: 'auto',
                        paddingTop: '1rem'
                      }}>
                        {isEditing ? (
                          <EditableField
                            value={project.url}
                            onSave={(value) => {
                              const projects = [...section.content.projects];
                              const index = projects.findIndex(p => p.id === project.id);
                              projects[index].url = value;
                              updateSectionContent(section.id, 'projects', projects);
                            }}
                            fieldId={`project-${project.id}-url`}
                            placeholder="Enter project URL"
                            style={{ 
                              fontSize: '0.875rem', 
                              color: profileTheme.primaryColor,
                              textDecoration: 'underline'
                            }}
                          />
                        ) : (
                          project.url && (
                            <a 
                              href={project.url} 
                              target="_blank" 
                              rel="noopener noreferrer" 
                              style={{ 
                                color: profileTheme.primaryColor, 
                                textDecoration: 'none', 
                                fontSize: '0.875rem', 
                                display: 'inline-flex', 
                                alignItems: 'center', 
                                gap: '0.5rem',
                                fontWeight: '500',
                                transition: 'all 0.3s ease'
                              }}
                              onMouseEnter={(e) => {
                                e.currentTarget.style.gap = '0.75rem';
                                e.currentTarget.style.textDecoration = 'underline';
                              }}
                              onMouseLeave={(e) => {
                                e.currentTarget.style.gap = '0.5rem';
                                e.currentTarget.style.textDecoration = 'none';
                              }}
                            >
                              View Project <ExternalLink size={16} />
                            </a>
                          )
                        )}
                        {isEditing && selectedSection === section.id && (
                          <button
                            onClick={() => {
                              const projects = section.content.projects.filter(p => p.id !== project.id);
                              updateSectionContent(section.id, 'projects', projects);
                            }}
                            style={{
                              padding: '0.5rem 1rem',
                              background: '#ef4444',
                              color: 'white',
                              border: 'none',
                              borderRadius: '8px',
                              fontSize: '0.875rem',
                              fontWeight: '500',
                              cursor: 'pointer',
                              transition: 'all 0.3s ease'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = '#dc2626';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = '#ef4444';
                            }}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
                
                {isEditing && selectedSection === section.id && (
                  <button
                    onClick={() => {
                      const newProject = {
                        id: Date.now(),
                        title: 'New Project',
                        description: 'Add a description for your project',
                        date: new Date().getFullYear().toString(),
                        image: 'https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=600&h=400&fit=crop',
                        url: 'https://example.com',
                        tags: ['Tag 1', 'Tag 2'],
                        metrics: { views: '0', likes: '0' }
                      };
                      const projects = [...section.content.projects, newProject];
                      updateSectionContent(section.id, 'projects', projects);
                    }}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '0.75rem',
                      padding: '3rem',
                      border: `2px dashed ${profileTheme.primaryColor}40`,
                      borderRadius: '16px',
                      background: 'transparent',
                      color: profileTheme.primaryColor,
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      fontSize: '1rem',
                      fontWeight: '500',
                      minHeight: '300px'
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.borderColor = profileTheme.primaryColor;
                      e.currentTarget.style.background = `${profileTheme.primaryColor}05`;
                      e.currentTarget.style.transform = 'scale(1.02)';
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.borderColor = `${profileTheme.primaryColor}40`;
                      e.currentTarget.style.background = 'transparent';
                      e.currentTarget.style.transform = 'scale(1)';
                    }}
                  >
                    <Plus size={24} />
                    Add New Project
                  </button>
                )}
              </div>
            </>
          );
          
        case 'experience':
          return (
            <>
              {sectionTitle}
              
              <div style={{ position: 'relative' }}>
                {section.settings.timeline && (
                  <div style={{
                    position: 'absolute',
                    left: '20px',
                    top: '0',
                    bottom: '0',
                    width: '2px',
                    background: `linear-gradient(180deg, ${profileTheme.primaryColor} 0%, ${profileTheme.secondaryColor} 100%)`,
                    zIndex: 0
                  }} />
                )}
                
                <div style={{ display: 'grid', gap: '2rem', position: 'relative' }}>
                  {section.content.entries.map((entry, index) => (
                    <div key={entry.id} style={{ 
                      padding: '2rem', 
                      paddingLeft: section.settings.timeline ? '3.5rem' : '2rem',
                      background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                      borderRadius: '12px',
                      position: 'relative',
                      transition: 'all 0.3s ease',
                      border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                      boxShadow: '0 2px 10px rgba(0,0,0,0.05)'
                    }}
                    onMouseOver={(e) => {
                      if (profileTheme.hoverEffects) {
                        e.currentTarget.style.transform = 'translateX(8px)';
                        e.currentTarget.style.boxShadow = '0 8px 24px rgba(0,0,0,0.1)';
                      }
                    }}
                    onMouseOut={(e) => {
                      if (profileTheme.hoverEffects) {
                        e.currentTarget.style.transform = 'translateX(0)';
                        e.currentTarget.style.boxShadow = '0 2px 10px rgba(0,0,0,0.05)';
                      }
                    }}>
                      {section.settings.timeline && (
                        <div style={{
                          position: 'absolute',
                          left: '-1.5rem',
                          top: '2rem',
                          width: '12px',
                          height: '12px',
                          borderRadius: '50%',
                          background: profileTheme.primaryColor,
                          border: `3px solid ${section.style.background || 'white'}`,
                          boxShadow: `0 0 0 3px ${profileTheme.primaryColor}20`,
                          zIndex: 1
                        }} />
                      )}
                      
                      {isEditing && selectedSection === section.id && (
                        <div style={{
                          position: 'absolute',
                          right: '1rem',
                          top: '1rem',
                          display: 'flex',
                          gap: '0.5rem'
                        }}>
                          <button
                            onClick={() => {
                              const entries = [...section.content.entries];
                              if (index > 0) {
                                [entries[index], entries[index - 1]] = [entries[index - 1], entries[index]];
                                updateSectionContent(section.id, 'entries', entries);
                              }
                            }}
                            style={{
                              background: 'white',
                              border: '1px solid #e5e7eb',
                              borderRadius: '6px',
                              padding: '0.5rem',
                              cursor: 'pointer',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              transition: 'all 0.2s ease'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = '#f3f4f6';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = 'white';
                            }}
                          >
                            <ChevronUp size={16} />
                          </button>
                          <button
                            onClick={() => {
                              const entries = [...section.content.entries];
                              if (index < entries.length - 1) {
                                [entries[index], entries[index + 1]] = [entries[index + 1], entries[index]];
                                updateSectionContent(section.id, 'entries', entries);
                              }
                            }}
                            style={{
                              background: 'white',
                              border: '1px solid #e5e7eb',
                              borderRadius: '6px',
                              padding: '0.5rem',
                              cursor: 'pointer',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              transition: 'all 0.2s ease'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = '#f3f4f6';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = 'white';
                            }}
                          >
                            <ChevronDown size={16} />
                          </button>
                          <button
                            onClick={() => {
                              const entries = section.content.entries.filter(e => e.id !== entry.id);
                              updateSectionContent(section.id, 'entries', entries);
                            }}
                            style={{
                              background: '#fee2e2',
                              color: '#dc2626',
                              border: '1px solid #fecaca',
                              borderRadius: '6px',
                              padding: '0.5rem',
                              cursor: 'pointer',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              transition: 'all 0.2s ease'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = '#fecaca';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = '#fee2e2';
                            }}
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      )}
                      
                      <div style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '1rem',
                        marginBottom: '0.75rem'
                      }}>
                        {entry.logo && (
                          <div style={{
                            fontSize: '2rem',
                            width: '48px',
                            height: '48px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            background: `${profileTheme.primaryColor}10`,
                            borderRadius: '8px'
                          }}>
                            {entry.logo}
                          </div>
                        )}
                        <div style={{ flex: 1 }}>
                          <EditableField
                            value={entry.title}
                            onSave={(value) => {
                              const entries = [...section.content.entries];
                              const idx = entries.findIndex(en => en.id === entry.id);
                              entries[idx].title = value;
                              updateSectionContent(section.id, 'entries', entries);
                            }}
                            fieldId={`exp-${entry.id}-title`}
                            style={{ 
                              fontSize: '1.25rem',
                              fontWeight: '700',
                              color: profileTheme.headingColor, 
                              fontFamily: profileTheme.headingFont,
                              marginBottom: '0.25rem',
                              display: 'block',
                              paddingRight: isEditing ? '150px' : '0'
                            }}
                          />
                          
                          {section.settings.showCompany && entry.company && (
                            <EditableField
                              value={entry.company}
                              onSave={(value) => {
                                const entries = [...section.content.entries];
                                const idx = entries.findIndex(en => en.id === entry.id);
                                entries[idx].company = value;
                                updateSectionContent(section.id, 'entries', entries);
                              }}
                              fieldId={`exp-${entry.id}-company`}
                              style={{ 
                                fontSize: '1rem', 
                                color: profileTheme.primaryColor, 
                                fontFamily: profileTheme.bodyFont, 
                                marginBottom: '0.5rem',
                                display: 'block',
                                fontWeight: '500'
                              }}
                            />
                          )}
                        </div>
                      </div>
                      
                      <div style={{
                        display: 'flex',
                        gap: '1rem',
                        flexWrap: 'wrap',
                        marginBottom: '1rem',
                        fontSize: '0.875rem',
                        color: profileTheme.paragraphColor
                      }}>
                        {section.settings.showLocation && (
                          <EditableField
                            value={entry.location}
                            onSave={(value) => {
                              const entries = [...section.content.entries];
                              const idx = entries.findIndex(en => en.id === entry.id);
                              entries[idx].location = value;
                              updateSectionContent(section.id, 'entries', entries);
                            }}
                            fieldId={`exp-${entry.id}-location`}
                            icon={<MapPin size={14} />}
                            style={{ 
                              opacity: 0.8, 
                              color: profileTheme.paragraphColor, 
                              fontFamily: profileTheme.bodyFont
                            }}
                          />
                        )}
                        {section.settings.showDates && (
                          <EditableField
                            value={entry.date}
                            onSave={(value) => {
                              const entries = [...section.content.entries];
                              const idx = entries.findIndex(en => en.id === entry.id);
                              entries[idx].date = value;
                              updateSectionContent(section.id, 'entries', entries);
                            }}
                            fieldId={`exp-${entry.id}-date`}
                            icon={<Calendar size={14} />}
                            style={{ 
                              opacity: 0.8, 
                              color: profileTheme.paragraphColor, 
                              fontFamily: profileTheme.bodyFont
                            }}
                          />
                        )}
                      </div>
                      
                      <EditableField
                        value={entry.description}
                        onSave={(value) => {
                          const entries = [...section.content.entries];
                          const idx = entries.findIndex(en => en.id === entry.id);
                          entries[idx].description = value;
                          updateSectionContent(section.id, 'entries', entries);
                        }}
                        fieldId={`exp-${entry.id}-desc`}
                        multiline={true}
                        style={{ 
                          fontSize: '0.9375rem', 
                          color: profileTheme.paragraphColor, 
                          fontFamily: profileTheme.bodyFont,
                          display: 'block',
                          lineHeight: '1.6',
                          marginBottom: entry.achievements ? '1rem' : '0'
                        }}
                      />
                      
                      {section.settings.showAchievements && entry.achievements && (
                        <div style={{
                          marginTop: '1rem',
                          paddingTop: '1rem',
                          borderTop: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#f3f4f6'}`
                        }}>
                         
                          <ul style={{
                            margin: 0,
                            paddingLeft: '1.5rem',
                            display: 'grid',
                            gap: '0.5rem'
                          }}>
                            {entry.achievements.map((achievement, i) => (
                              <li key={i} style={{
                                fontSize: '0.875rem',
                                color: profileTheme.paragraphColor,
                                lineHeight: '1.5'
                              }}>
                                {achievement}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                
                {isEditing && selectedSection === section.id && (
                  <button
                    onClick={() => {
                      const newEntry = {
                        id: Date.now(),
                        title: 'New Position',
                        company: 'Company Name',
                        location: 'City, State',
                        date: '2025 - Present',
                        description: 'Describe your role and responsibilities',
                        achievements: [
                          'Achievement 1',
                          'Achievement 2'
                        ],
                        logo: '🏢'
                      };
                      const entries = [...section.content.entries, newEntry];
                      updateSectionContent(section.id, 'entries', entries);
                    }}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '0.75rem',
                      padding: '1.5rem',
                      marginTop: '2rem',
                      border: `2px dashed ${profileTheme.primaryColor}40`,
                      borderRadius: '12px',
                      background: 'transparent',
                      color: profileTheme.primaryColor,
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      width: '100%',
                      fontSize: '1rem',
                      fontWeight: '500'
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.borderColor = profileTheme.primaryColor;
                      e.currentTarget.style.background = `${profileTheme.primaryColor}05`;
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.borderColor = `${profileTheme.primaryColor}40`;
                      e.currentTarget.style.background = 'transparent';
                    }}
                  >
                    <Plus size={20} />
                    Add Experience
                  </button>
                )}
              </div>
            </>
          );
          
        case 'education':
          return (
            <>
              {sectionTitle}
              
              <div style={{ display: 'grid', gap: '1.5rem' }}>
                {section.content.entries.map((entry, index) => (
                  <div key={entry.id} style={{ 
                    padding: '2rem', 
                    background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                    borderRadius: '12px',
                    position: 'relative',
                    transition: 'all 0.3s ease',
                    border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                    display: 'flex',
                    gap: '1.5rem',
                    alignItems: 'flex-start'
                  }}
                  onMouseOver={(e) => {
                    if (profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 8px 24px rgba(0,0,0,0.1)';
                    }
                  }}
                  onMouseOut={(e) => {
                    if (profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = 'none';
                    }
                  }}>
                    {section.settings.showLogo && entry.logo && (
                      <div style={{
                        fontSize: '2.5rem',
                        width: '64px',
                        height: '64px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        background: `linear-gradient(135deg, ${profileTheme.primaryColor}20, ${profileTheme.secondaryColor}20)`,
                        borderRadius: '12px',
                        flexShrink: 0
                      }}>
                        {entry.logo}
                      </div>
                    )}
                    
                    <div style={{ flex: 1 }}>
                      {isEditing && selectedSection === section.id && (
                        <div style={{
                          position: 'absolute',
                          right: '1rem',
                          top: '1rem',
                          display: 'flex',
                          gap: '0.5rem'
                        }}>
                          <button
                            onClick={() => {
                              const entries = [...section.content.entries];
                              if (index > 0) {
                                [entries[index], entries[index - 1]] = [entries[index - 1], entries[index]];
                                updateSectionContent(section.id, 'entries', entries);
                              }
                            }}
                            style={{
                              background: 'white',
                              border: '1px solid #e5e7eb',
                              borderRadius: '6px',
                              padding: '0.5rem',
                              cursor: 'pointer'
                            }}
                          >
                            <ChevronUp size={16} />
                          </button>
                          <button
                            onClick={() => {
                              const entries = [...section.content.entries];
                              if (index < entries.length - 1) {
                                [entries[index], entries[index + 1]] = [entries[index + 1], entries[index]];
                                updateSectionContent(section.id, 'entries', entries);
                              }
                            }}
                            style={{
                              background: 'white',
                              border: '1px solid #e5e7eb',
                              borderRadius: '6px',
                              padding: '0.5rem',
                              cursor: 'pointer'
                            }}
                          >
                            <ChevronDown size={16} />
                          </button>
                          <button
                            onClick={() => {
                              const entries = section.content.entries.filter(e => e.id !== entry.id);
                              updateSectionContent(section.id, 'entries', entries);
                            }}
                            style={{
                              background: '#fee2e2',
                              color: '#dc2626',
                              border: '1px solid #fecaca',
                              borderRadius: '6px',
                              padding: '0.5rem',
                              cursor: 'pointer'
                            }}
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      )}
                      
                      <EditableField
                        value={entry.degree}
                        onSave={(value) => {
                          const entries = [...section.content.entries];
                          const idx = entries.findIndex(en => en.id === entry.id);
                          entries[idx].degree = value;
                          updateSectionContent(section.id, 'entries', entries);
                        }}
                        fieldId={`edu-${entry.id}-degree`}
                        style={{ 
                          fontSize: '1.25rem',
                          fontWeight: '700',
                          color: profileTheme.headingColor, 
                          fontFamily: profileTheme.headingFont,
                          marginBottom: '0.25rem',
                          display: 'block',
                          paddingRight: isEditing ? '150px' : '0'
                        }}
                      />
                      
                      {entry.field && (
                        <EditableField
                          value={entry.field}
                          onSave={(value) => {
                            const entries = [...section.content.entries];
                            const idx = entries.findIndex(en => en.id === entry.id);
                            entries[idx].field = value;
                            updateSectionContent(section.id, 'entries', entries);
                          }}
                          fieldId={`edu-${entry.id}-field`}
                          style={{ 
                            fontSize: '1rem', 
                            color: profileTheme.primaryColor, 
                            fontFamily: profileTheme.bodyFont, 
                            marginBottom: '0.5rem',
                            display: 'block',
                            fontWeight: '500'
                          }}
                        />
                      )}
                      
                      <EditableField
                        value={entry.institution || entry.location}
                        onSave={(value) => {
                          const entries = [...section.content.entries];
                          const idx = entries.findIndex(en => en.id === entry.id);
                          entries[idx].institution = value;
                          entries[idx].location = value;
                          updateSectionContent(section.id, 'entries', entries);
                        }}
                        fieldId={`edu-${entry.id}-institution`}
                        style={{ 
                          fontSize: '0.9375rem', 
                          opacity: 0.9, 
                          color: profileTheme.paragraphColor, 
                          fontFamily: profileTheme.bodyFont, 
                          marginBottom: '0.5rem',
                          display: 'block'
                        }}
                      />
                      
                      <div style={{
                        display: 'flex',
                        gap: '1.5rem',
                        flexWrap: 'wrap',
                        marginBottom: '0.75rem',
                        fontSize: '0.875rem'
                      }}>
                        {section.settings.showYear && (
                          <EditableField
                            value={entry.date}
                            onSave={(value) => {
                              const entries = [...section.content.entries];
                              const idx = entries.findIndex(en => en.id === entry.id);
                              entries[idx].date = value;
                              updateSectionContent(section.id, 'entries', entries);
                            }}
                            fieldId={`edu-${entry.id}-date`}
                            icon={<Calendar size={14} />}
                            style={{ 
                              opacity: 0.8, 
                              color: profileTheme.paragraphColor, 
                              fontFamily: profileTheme.bodyFont
                            }}
                          />
                        )}
                        
                        {section.settings.showGPA && entry.gpa && (
                          <EditableField
                            value={`GPA: ${entry.gpa}`}
                            onSave={(value) => {
                              const entries = [...section.content.entries];
                              const idx = entries.findIndex(en => en.id === entry.id);
                              entries[idx].gpa = value.replace('GPA: ', '');
                              updateSectionContent(section.id, 'entries', entries);
                            }}
                            fieldId={`edu-${entry.id}-gpa`}
                            style={{ 
                              opacity: 0.8, 
                              color: profileTheme.paragraphColor, 
                              fontFamily: profileTheme.bodyFont,
                              fontWeight: '600'
                            }}
                          />
                        )}
                      </div>
                      
                      <EditableField
                        value={entry.description}
                        onSave={(value) => {
                          const entries = [...section.content.entries];
                          const idx = entries.findIndex(en => en.id === entry.id);
                          entries[idx].description = value;
                          updateSectionContent(section.id, 'entries', entries);
                        }}
                        fieldId={`edu-${entry.id}-desc`}
                        multiline={true}
                        style={{ 
                          fontSize: '0.9375rem', 
                          color: profileTheme.paragraphColor, 
                          fontFamily: profileTheme.bodyFont,
                          display: 'block',
                          lineHeight: '1.6'
                        }}
                      />
                      
                      {section.settings.showHonors && entry.honors && entry.honors.length > 0 && (
                        <div style={{
                          display: 'flex',
                          gap: '0.5rem',
                          flexWrap: 'wrap',
                          marginTop: '1rem'
                        }}>
                          {entry.honors.map((honor, i) => (
                            <span key={i} style={{
                              padding: '0.375rem 0.75rem',
                              background: `${profileTheme.accentColor}15`,
                              color: profileTheme.accentColor,
                              borderRadius: '6px',
                              fontSize: '0.75rem',
                              fontWeight: '600',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.375rem'
                            }}>
                              <Star size={12} />
                              {honor}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
                
                {isEditing && selectedSection === section.id && (
                  <button
                    onClick={() => {
                      const newEntry = {
                        id: Date.now(),
                        degree: 'New Degree',
                        field: 'Field of Study',
                        institution: 'University Name',
                        location: 'City, Country',
                        date: '2025',
                        description: 'Describe your studies and achievements',
                        gpa: '4.0/4.0',
                        honors: ['Honor 1'],
                        logo: '🎓'
                      };
                      const entries = [...section.content.entries, newEntry];
                      updateSectionContent(section.id, 'entries', entries);
                    }}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '0.75rem',
                      padding: '1.5rem',
                      border: `2px dashed ${profileTheme.primaryColor}40`,
                      borderRadius: '12px',
                      background: 'transparent',
                      color: profileTheme.primaryColor,
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      width: '100%',
                      fontSize: '1rem',
                      fontWeight: '500'
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.borderColor = profileTheme.primaryColor;
                      e.currentTarget.style.background = `${profileTheme.primaryColor}05`;
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.borderColor = `${profileTheme.primaryColor}40`;
                      e.currentTarget.style.background = 'transparent';
                    }}
                  >
                    <Plus size={20} />
                    Add Education
                  </button>
                )}
              </div>
            </>
          );
          
        case 'achievements':
          const AchievementIcon = ({ icon }) => {
            const icons = {
              trophy: <Award size={24} />,
              star: <Star size={24} />,
              mic: <Music size={24} />,
              certificate: <Award size={24} />
            };
            return icons[icon] || <Star size={24} />;
          };
          
          const renderAchievements = () => {
            const achievementsList = section.content.achievements.map((achievement, index) => {
              const baseStyle = {
                position: 'relative',
                transition: 'all 0.3s ease'
              };
              
              const layoutStyles = {
                timeline: {
                  ...baseStyle,
                  paddingLeft: '3rem',
                  marginBottom: '2rem'
                },
                cards: {
                  ...baseStyle,
                  padding: '2rem',
                  background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                  borderRadius: '12px',
                  boxShadow: '0 2px 10px rgba(0, 0, 0, 0.05)',
                  border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                  height: '100%',
                  display: 'flex',
                  flexDirection: 'column'
                },
                grid: {
                  ...baseStyle,
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  textAlign: 'center',
                  padding: '2rem',
                  background: `${profileTheme.primaryColor}05`,
                  borderRadius: '12px',
                  height: '100%'
                },
                list: {
                  ...baseStyle,
                  display: 'flex',
                  alignItems: 'flex-start',
                  gap: '1rem',
                  padding: '1rem',
                  borderRadius: '8px',
                  marginBottom: '1rem'
                }
              };
              
              return (
                <div 
                  key={achievement.id} 
                  style={layoutStyles[section.settings.layout]}
                  onMouseOver={(e) => {
                    if (profileTheme.hoverEffects) {
                      if (section.settings.layout === 'cards') {
                        e.currentTarget.style.transform = 'translateY(-4px)';
                        e.currentTarget.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.1)';
                      } else if (section.settings.layout !== 'timeline') {
                        e.currentTarget.style.background = `${profileTheme.primaryColor}10`;
                      }
                    }
                  }}
                  onMouseOut={(e) => {
                    if (profileTheme.hoverEffects) {
                      if (section.settings.layout === 'cards') {
                        e.currentTarget.style.transform = 'translateY(0)';
                        e.currentTarget.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.05)';
                      } else if (section.settings.layout === 'list') {
                        e.currentTarget.style.background = 'transparent';
                      } else if (section.settings.layout === 'grid') {
                        e.currentTarget.style.background = `${profileTheme.primaryColor}05`;
                      }
                    }
                  }}
                >
                  {/* Timeline dot */}
                  {section.settings.layout === 'timeline' && (
                    <>
                      <div style={{
                        position: 'absolute',
                        left: '0',
                        top: '0.5rem',
                        width: '16px',
                        height: '16px',
                        background: profileTheme.accentColor,
                        borderRadius: '50%',
                        border: `3px solid ${section.style.background || 'white'}`,
                        boxShadow: `0 0 0 3px ${profileTheme.accentColor}20`
                      }} />
                      <div style={{
                        position: 'absolute',
                        left: '7px',
                        top: '2rem',
                        bottom: '-2rem',
                        width: '2px',
                        background: `${profileTheme.primaryColor}20`
                      }} />
                    </>
                  )}
                  
                  {/* Icon */}
                  {(section.settings.layout === 'list' || section.settings.layout === 'grid') && (
                    <div style={{
                      color: profileTheme.accentColor,
                      marginBottom: section.settings.layout === 'grid' ? '1rem' : '0'
                    }}>
                      <AchievementIcon icon={achievement.icon} />
                    </div>
                  )}
                  
                  {/* Edit controls */}
                  {isEditing && selectedSection === section.id && (
                    <div style={{
                      position: 'absolute',
                      right: '0.5rem',
                      top: '0.5rem',
                      display: 'flex',
                      gap: '0.25rem',
                      zIndex: 10
                    }}>
                      <button
                        onClick={() => {
                          const achievements = [...section.content.achievements];
                          if (index > 0) {
                            [achievements[index], achievements[index - 1]] = [achievements[index - 1], achievements[index]];
                            updateSectionContent(section.id, 'achievements', achievements);
                          }
                        }}
                        style={{
                          background: 'white',
                          border: '1px solid #e5e7eb',
                          borderRadius: '4px',
                          padding: '0.25rem',
                          cursor: 'pointer'
                        }}
                      >
                        <ChevronUp size={14} />
                      </button>
                      <button
                        onClick={() => {
                          const achievements = [...section.content.achievements];
                          if (index < achievements.length - 1) {
                            [achievements[index], achievements[index + 1]] = [achievements[index + 1], achievements[index]];
                            updateSectionContent(section.id, 'achievements', achievements);
                          }
                        }}
                        style={{
                          background: 'white',
                          border: '1px solid #e5e7eb',
                          borderRadius: '4px',
                          padding: '0.25rem',
                          cursor: 'pointer'
                        }}
                      >
                        <ChevronDown size={14} />
                      </button>
                      <button
                        onClick={() => {
                          const achievements = section.content.achievements.filter(a => a.id !== achievement.id);
                          updateSectionContent(section.id, 'achievements', achievements);
                        }}
                        style={{
                          background: '#fee2e2',
                          color: '#dc2626',
                          border: '1px solid #fecaca',
                          borderRadius: '4px',
                          padding: '0.25rem',
                          cursor: 'pointer'
                        }}
                      >
                        <Trash2 size={14} />
                      </button>
                    </div>
                  )}
                  
                  {/* Content */}
                  <div style={{ 
                    flex: 1,
                    paddingRight: isEditing ? '100px' : '0'
                  }}>
                    <EditableField
                      value={achievement.title}
                      onSave={(value) => {
                        const achievements = [...section.content.achievements];
                        const idx = achievements.findIndex(a => a.id === achievement.id);
                        achievements[idx].title = value;
                        updateSectionContent(section.id, 'achievements', achievements);
                      }}
                      fieldId={`ach-${achievement.id}-title`}
                      style={{ 
                        fontSize: section.settings.layout === 'cards' ? '1.25rem' : '1.125rem',
                        fontWeight: '700',
                        color: profileTheme.headingColor, 
                        fontFamily: profileTheme.headingFont,
                        marginBottom: '0.5rem',
                        display: 'block'
                      }}
                    />
                    
                    {section.settings.showIssuer && achievement.issuer && (
                      <EditableField
                        value={achievement.issuer}
                        onSave={(value) => {
                          const achievements = [...section.content.achievements];
                          const idx = achievements.findIndex(a => a.id === achievement.id);
                          achievements[idx].issuer = value;
                          updateSectionContent(section.id, 'achievements', achievements);
                        }}
                        fieldId={`ach-${achievement.id}-issuer`}
                        style={{ 
                          fontSize: '0.875rem', 
                          color: profileTheme.primaryColor, 
                          fontFamily: profileTheme.bodyFont,
                          marginBottom: '0.25rem',
                          display: 'block',
                          fontWeight: '500'
                        }}
                      />
                    )}
                    
                    {section.settings.showDate && (
                      <EditableField
                        value={achievement.date}
                        onSave={(value) => {
                          const achievements = [...section.content.achievements];
                          const idx = achievements.findIndex(a => a.id === achievement.id);
                          achievements[idx].date = value;
                          updateSectionContent(section.id, 'achievements', achievements);
                        }}
                        fieldId={`ach-${achievement.id}-date`}
                        icon={<Calendar size={14} />}
                        style={{ 
                          fontSize: '0.875rem', 
                          opacity: 0.7, 
                          color: profileTheme.paragraphColor, 
                          fontFamily: profileTheme.bodyFont,
                          marginBottom: '0.5rem',
                          display: 'inline-flex'
                        }}
                      />
                    )}
                    
                    {section.settings.showDescription && (
                      <EditableField
                        value={achievement.description}
                        onSave={(value) => {
                          const achievements = [...section.content.achievements];
                          const idx = achievements.findIndex(a => a.id === achievement.id);
                          achievements[idx].description = value;
                          updateSectionContent(section.id, 'achievements', achievements);
                        }}
                        fieldId={`ach-${achievement.id}-desc`}
                        multiline={true}
                        style={{ 
                          fontSize: '0.9375rem', 
                          color: profileTheme.paragraphColor, 
                          fontFamily: profileTheme.bodyFont,
                          display: 'block',
                          lineHeight: '1.6',
                          marginBottom: section.settings.showLink && achievement.link ? '0.75rem' : '0'
                        }}
                      />
                    )}
                    
                    {section.settings.showLink && achievement.link && (
                      <a
                        href={achievement.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        style={{
                          fontSize: '0.875rem',
                          color: profileTheme.primaryColor,
                          textDecoration: 'none',
                          display: 'inline-flex',
                          alignItems: 'center',
                          gap: '0.375rem',
                          fontWeight: '500',
                          marginTop: 'auto'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.textDecoration = 'underline';
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.textDecoration = 'none';
                        }}
                      >
                      </a>
                    )}
                  </div>
                </div>
              );
            });

            if (section.settings.layout === 'grid') {
              return (
                <div style={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
                  gap: '1.5rem' 
                }}>
                  {achievementsList}
                </div>
              );
            } else if (section.settings.layout === 'cards') {
              return (
                <div style={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
                  gap: '1.5rem' 
                }}>
                  {achievementsList}
                </div>
              );
            } else if (section.settings.layout === 'timeline') {
              return (
                <div style={{ 
                  position: 'relative',
                  paddingLeft: '1rem'
                }}>
                  {achievementsList}
                </div>
              );
            } else {
              return achievementsList;
            }
          };

          return (
            <>
              {sectionTitle}
              
              {renderAchievements()}
              
              {isEditing && selectedSection === section.id && (
                <button
                  onClick={() => {
                    const newAchievement = {
                      id: Date.now(),
                      title: 'New Achievement',
                      date: new Date().getFullYear().toString(),
                      description: 'Describe your achievement',
                      icon: 'star',
                      issuer: 'Issuing Organization',
                      link: 'https://example.com'
                    };
                    const achievements = [...section.content.achievements, newAchievement];
                    updateSectionContent(section.id, 'achievements', achievements);
                  }}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '0.75rem',
                    padding: '1.5rem',
                    marginTop: '2rem',
                    border: `2px dashed ${profileTheme.primaryColor}40`,
                    borderRadius: '12px',
                    background: 'transparent',
                    color: profileTheme.primaryColor,
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    width: '100%',
                    fontSize: '1rem',
                    fontWeight: '500'
                  }}
                  onMouseOver={(e) => {
                    e.currentTarget.style.borderColor = profileTheme.primaryColor;
                    e.currentTarget.style.background = `${profileTheme.primaryColor}05`;
                  }}
                  onMouseOut={(e) => {
                    e.currentTarget.style.borderColor = `${profileTheme.primaryColor}40`;
                    e.currentTarget.style.background = 'transparent';
                  }}
                >
                  <Plus size={20} />
                  Add Achievement
                </button>
              )}
            </>
          );
          
        case 'testimonials':
          return (
            <>
              {sectionTitle}
              
              <div style={{ display: 'grid', gap: '1.5rem' }}>
                {section.content.testimonials.map((testimonial, index) => (
                  <div key={testimonial.id} style={{ 
                    padding: '2rem', 
                    background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                    borderRadius: '12px',
                    position: 'relative',
                    transition: 'all 0.3s ease',
                    border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                    boxShadow: '0 2px 10px rgba(0,0,0,0.05)'
                  }}
                  onMouseOver={(e) => {
                    if (profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 8px 24px rgba(0,0,0,0.1)';
                    }
                  }}
                  onMouseOut={(e) => {
                    if (profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = '0 2px 10px rgba(0,0,0,0.05)';
                    }
                  }}>
                    {/* Edit controls */}
                    {isEditing && selectedSection === section.id && (
                      <div style={{
                        position: 'absolute',
                        right: '1rem',
                        top: '1rem',
                        display: 'flex',
                        gap: '0.5rem'
                      }}>
                        <button
                          onClick={() => {
                            const testimonials = [...section.content.testimonials];
                            if (index > 0) {
                              [testimonials[index], testimonials[index - 1]] = [testimonials[index - 1], testimonials[index]];
                              updateSectionContent(section.id, 'testimonials', testimonials);
                            }
                          }}
                          style={{
                            background: 'white',
                            border: '1px solid #e5e7eb',
                            borderRadius: '6px',
                            padding: '0.5rem',
                            cursor: 'pointer'
                          }}
                        >
                          <ChevronUp size={16} />
                        </button>
                        <button
                          onClick={() => {
                            const testimonials = [...section.content.testimonials];
                            if (index < testimonials.length - 1) {
                              [testimonials[index], testimonials[index + 1]] = [testimonials[index + 1], testimonials[index]];
                              updateSectionContent(section.id, 'testimonials', testimonials);
                            }
                          }}
                          style={{
                            background: 'white',
                            border: '1px solid #e5e7eb',
                            borderRadius: '6px',
                            padding: '0.5rem',
                            cursor: 'pointer'
                          }}
                        >
                          <ChevronDown size={16} />
                        </button>
                        <button
                          onClick={() => {
                            const testimonials = section.content.testimonials.filter(t => t.id !== testimonial.id);
                            updateSectionContent(section.id, 'testimonials', testimonials);
                          }}
                          style={{
                            background: '#fee2e2',
                            color: '#dc2626',
                            border: '1px solid #fecaca',
                            borderRadius: '6px',
                            padding: '0.5rem',
                            cursor: 'pointer'
                          }}
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                    )}
                    
                    <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>
                      {section.settings.showImage && testimonial.image && (
                        <img 
                          src={testimonial.image} 
                          alt={testimonial.name}
                          style={{
                            width: '60px',
                            height: '60px',
                            borderRadius: '50%',
                            objectFit: 'cover',
                            flexShrink: 0
                          }}
                        />
                      )}
                      
                      <div style={{ flex: 1 }}>
                        <EditableField
                          value={testimonial.content}
                          onSave={(value) => {
                            const testimonials = [...section.content.testimonials];
                            const idx = testimonials.findIndex(t => t.id === testimonial.id);
                            testimonials[idx].content = value;
                            updateSectionContent(section.id, 'testimonials', testimonials);
                          }}
                          fieldId={`testimonial-${testimonial.id}-content`}
                          multiline={true}
                          style={{
                            fontSize: '1rem',
                            lineHeight: '1.6',
                            color: profileTheme.paragraphColor,
                            marginBottom: '1rem',
                            fontStyle: 'italic'
                          }}
                        />
                        
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <div>
                            <EditableField
                              value={testimonial.name}
                              onSave={(value) => {
                                const testimonials = [...section.content.testimonials];
                                const idx = testimonials.findIndex(t => t.id === testimonial.id);
                                testimonials[idx].name = value;
                                updateSectionContent(section.id, 'testimonials', testimonials);
                              }}
                              fieldId={`testimonial-${testimonial.id}-name`}
                              style={{
                                fontSize: '0.875rem',
                                fontWeight: '600',
                                color: profileTheme.headingColor,
                                marginBottom: '0.25rem'
                              }}
                            />
                            
                            <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
                              <EditableField
                                value={testimonial.role}
                                onSave={(value) => {
                                  const testimonials = [...section.content.testimonials];
                                  const idx = testimonials.findIndex(t => t.id === testimonial.id);
                                  testimonials[idx].role = value;
                                  updateSectionContent(section.id, 'testimonials', testimonials);
                                }}
                                fieldId={`testimonial-${testimonial.id}-role`}
                                style={{
                                  fontSize: '0.75rem',
                                  color: profileTheme.paragraphColor,
                                  opacity: 0.8
                                }}
                              />
                              
                              {section.settings.showCompany && (
                                <>
                                  <span style={{ color: profileTheme.paragraphColor, opacity: 0.5 }}>at</span>
                                  <EditableField
                                    value={testimonial.company}
                                    onSave={(value) => {
                                      const testimonials = [...section.content.testimonials];
                                      const idx = testimonials.findIndex(t => t.id === testimonial.id);
                                      testimonials[idx].company = value;
                                      updateSectionContent(section.id, 'testimonials', testimonials);
                                    }}
                                    fieldId={`testimonial-${testimonial.id}-company`}
                                    style={{
                                      fontSize: '0.75rem',
                                      color: profileTheme.primaryColor,
                                      fontWeight: '500'
                                    }}
                                  />
                                </>
                              )}
                            </div>
                          </div>
                          
                          {section.settings.showRating && testimonial.rating && (
                            <div style={{ display: 'flex', gap: '0.125rem' }}>
                              {[...Array(5)].map((_, i) => (
                                <Star 
                                  key={i} 
                                  size={16} 
                                  fill={i < testimonial.rating ? profileTheme.accentColor : 'none'}
                                  color={i < testimonial.rating ? profileTheme.accentColor : '#e5e7eb'}
                                />
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                {isEditing && selectedSection === section.id && (
                  <button
                    onClick={() => {
                      const newTestimonial = {
                        id: Date.now(),
                        name: 'Client Name',
                        role: 'Position',
                        company: 'Company Name',
                        image: '',
                        content: 'Add testimonial content here...',
                        rating: 5,
                        date: new Date().getFullYear().toString()
                      };
                      const testimonials = [...section.content.testimonials, newTestimonial];
                      updateSectionContent(section.id, 'testimonials', testimonials);
                    }}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '0.75rem',
                      padding: '1.5rem',
                      border: `2px dashed ${profileTheme.primaryColor}40`,
                      borderRadius: '12px',
                      background: 'transparent',
                      color: profileTheme.primaryColor,
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      width: '100%',
                      fontSize: '1rem',
                      fontWeight: '500'
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.borderColor = profileTheme.primaryColor;
                      e.currentTarget.style.background = `${profileTheme.primaryColor}05`;
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.borderColor = `${profileTheme.primaryColor}40`;
                      e.currentTarget.style.background = 'transparent';
                    }}
                  >
                    <Plus size={20} />
                    Add Testimonial
                  </button>
                )}
              </div>
            </>
          );
          
        case 'faq':
          
          return (
            <>
              {sectionTitle}
              
              <div style={{ display: 'grid', gap: '1rem' }}>
                {section.content.faqs.map((faq, index) => (
                  <div key={faq.id} style={{ 
                    background: isDark ? 'rgba(255,255,255,0.05)' : 'white', 
                    borderRadius: '12px', 
                    overflow: 'hidden',
                    position: 'relative',
                    transition: 'all 0.3s ease',
                    border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                    boxShadow: '0 2px 10px rgba(0,0,0,0.05)'
                  }}
                  onMouseOver={(e) => {
                    if (profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 8px 24px rgba(0,0,0,0.1)';
                    }
                  }}
                  onMouseOut={(e) => {
                    if (profileTheme.hoverEffects) {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = '0 2px 10px rgba(0,0,0,0.05)';
                    }
                  }}>
                    <div 
                      style={{ 
                        padding: '1.5rem', 
                        fontWeight: '600', 
                        color: profileTheme.headingColor, 
                        cursor: section.settings.collapsible ? 'pointer' : 'default', 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        alignItems: 'center',
                        background: section.settings.collapsible && expandedFAQs[faq.id]
                          ? `${profileTheme.primaryColor}05`
                          : 'transparent',
                        transition: 'background 0.3s ease'
                      }}
                      onClick={() => toggleFAQ(faq.id, section)}
                    >
                      <div style={{ flex: 1, display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                        {section.settings.showCategories && faq.category && (
                          <span style={{
                            padding: '0.25rem 0.75rem',
                            background: `${profileTheme.primaryColor}10`,
                            color: profileTheme.primaryColor,
                            borderRadius: '100px',
                            fontSize: '0.75rem',
                            fontWeight: '500'
                          }}>
                            {faq.category}
                          </span>
                        )}
                        <EditableField
                          value={faq.question}
                          onSave={(value) => {
                            const faqs = [...section.content.faqs];
                            const idx = faqs.findIndex(f => f.id === faq.id);
                            faqs[idx].question = value;
                            updateSectionContent(section.id, 'faqs', faqs);
                          }}
                          fieldId={`faq-${faq.id}-question`}
                          style={{ 
                            fontSize: '1.0625rem',
                            paddingRight: isEditing ? '120px' : section.settings.collapsible ? '40px' : '0'
                          }}
                        />
                      </div>
                      
                      {section.settings.collapsible && (
                        <ChevronDown 
                          size={20} 
                          style={{
                            transform: expandedFAQs[faq.id] ? 'rotate(180deg)' : 'rotate(0deg)',
                            transition: 'transform 0.3s ease',
                            color: profileTheme.primaryColor,
                            flexShrink: 0
                          }}
                        />
                      )}
                      
                      {isEditing && selectedSection === section.id && (
                        <div style={{
                          position: 'absolute',
                          right: '1rem',
                          top: '1rem',
                          display: 'flex',
                          gap: '0.25rem'
                        }}>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              const faqs = [...section.content.faqs];
                              if (index > 0) {
                                [faqs[index], faqs[index - 1]] = [faqs[index - 1], faqs[index]];
                                updateSectionContent(section.id, 'faqs', faqs);
                              }
                            }}
                            style={{
                              background: 'white',
                              border: '1px solid #e5e7eb',
                              borderRadius: '4px',
                              padding: '0.25rem',
                              cursor: 'pointer'
                            }}
                          >
                            <ChevronUp size={14} />
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              const faqs = [...section.content.faqs];
                              if (index < faqs.length - 1) {
                                [faqs[index], faqs[index + 1]] = [faqs[index + 1], faqs[index]];
                                updateSectionContent(section.id, 'faqs', faqs);
                              }
                            }}
                            style={{
                              background: 'white',
                              border: '1px solid #e5e7eb',
                              borderRadius: '4px',
                              padding: '0.25rem',
                              cursor: 'pointer'
                            }}
                          >
                            <ChevronDown size={14} />
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              const faqs = section.content.faqs.filter(f => f.id !== faq.id);
                              updateSectionContent(section.id, 'faqs', faqs);
                            }}
                            style={{
                              background: '#fee2e2',
                              color: '#dc2626',
                              border: '1px solid #fecaca',
                              borderRadius: '4px',
                              padding: '0.25rem',
                              cursor: 'pointer'
                            }}
                          >
                            <Trash2 size={14} />
                          </button>
                        </div>
                      )}
                    </div>
                    
                    <div style={{ 
                      padding: section.settings.collapsible && !expandedFAQs[faq.id] ? '0 1.5rem' : '0 1.5rem 1.5rem 1.5rem',
                      maxHeight: section.settings.collapsible && !expandedFAQs[faq.id] ? '0' : '500px',
                      overflow: 'hidden',
                      transition: 'all 0.3s ease',
                      opacity: section.settings.collapsible && !expandedFAQs[faq.id] ? 0 : 1
                    }}>
                      <EditableField
                        value={faq.answer}
                        onSave={(value) => {
                          const faqs = [...section.content.faqs];
                          const idx = faqs.findIndex(f => f.id === faq.id);
                          faqs[idx].answer = value;
                          updateSectionContent(section.id, 'faqs', faqs);
                        }}
                        fieldId={`faq-${faq.id}-answer`}
                        multiline={true}
                        style={{ 
                          fontSize: '0.9375rem', 
                          color: profileTheme.paragraphColor,
                          display: 'block',
                          lineHeight: '1.6',
                          paddingTop: '0.5rem'
                        }}
                      />
                    </div>
                  </div>
                ))}
                
                {isEditing && selectedSection === section.id && (
                  <button
                    onClick={() => {
                      const newFaq = {
                        id: Date.now(),
                        question: 'New Question?',
                        answer: 'Type your answer here',
                        category: 'General'
                      };
                      const faqs = [...section.content.faqs, newFaq];
                      updateSectionContent(section.id, 'faqs', faqs);
                    }}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '0.75rem',
                      padding: '1.5rem',
                      border: `2px dashed ${profileTheme.primaryColor}40`,
                      borderRadius: '12px',
                      background: 'transparent',
                      color: profileTheme.primaryColor,
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      width: '100%',
                      fontSize: '1rem',
                      fontWeight: '500'
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.borderColor = profileTheme.primaryColor;
                      e.currentTarget.style.background = `${profileTheme.primaryColor}05`;
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.borderColor = `${profileTheme.primaryColor}40`;
                      e.currentTarget.style.background = 'transparent';
                    }}
                  >
                    <Plus size={20} />
                    Add Question
                  </button>
                )}
              </div>
            </>
          );
          
        default:
          return (
            <>
              {sectionTitle}
              <p style={{ 
                textAlign: 'center', 
                opacity: 0.6, 
                color: profileTheme.paragraphColor, 
                fontFamily: profileTheme.bodyFont,
                padding: '3rem',
                background: `${profileTheme.primaryColor}05`,
                borderRadius: '12px',
                border: `1px dashed ${profileTheme.primaryColor}40`
              }}>
                {section.type} section - Click to customize
              </p>
            </>
          );
      }
    };

    return (
      <div
        style={sectionStyle}
        onClick={() => {
          if (isEditing) {
            setSelectedSection(section.id);
            setCustomizationTab('editor');
          }
        }}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {isEditing && (
          <div style={{
            position: 'absolute',
            top: '1rem',
            right: '1rem',
            display: 'flex',
            gap: '0.5rem',
            background: 'rgba(255, 255, 255, 0.95)',
            padding: '0.5rem',
            borderRadius: '8px',
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
            backdropFilter: 'blur(10px)',
            zIndex: 10,
            opacity: isHovered ? 1 : 0.7,
            transition: 'opacity 0.3s ease'
          }}>
            {/* Show/Hide button for all sections except header and bio */}
            {section.id !== 'header' && section.id !== 'bio' && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  updateSection(section.id, { visible: !section.visible });
                }}
                style={{
                  background: section.visible ? profileTheme.primaryColor : '#e5e7eb',
                  border: 'none',
                  cursor: 'pointer',
                  padding: '0.5rem',
                  color: section.visible ? 'white' : '#6b7280',
                  borderRadius: '6px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s ease'
                }}
                title={section.visible ? 'Hide' : 'Show'}
              >
                {section.visible ? <Eye size={16} /> : <EyeOff size={16} />}
              </button>
            )}
            
            {/* Up/Down arrows for sections except header and bio */}
            {section.id !== 'header' && section.id !== 'bio' && (
              <div style={{
                display: 'flex',
                gap: '0.25rem',
                background: '#f3f4f6',
                borderRadius: '6px',
                padding: '0.25rem'
              }}>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    moveSection(section.id, 'up');
                  }}
                  style={{
                    background: 'transparent',
                    border: 'none',
                    cursor: 'pointer',
                    padding: '0.25rem',
                    color: '#6b7280',
                    display: 'flex',
                    borderRadius: '4px',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = '#e5e7eb';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = 'transparent';
                  }}
                >
                  <ChevronUp size={14} />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    moveSection(section.id, 'down');
                  }}
                  style={{
                    background: 'transparent',
                    border: 'none',
                    cursor: 'pointer',
                    padding: '0.25rem',
                    color: '#6b7280',
                    display: 'flex',
                    borderRadius: '4px',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = '#e5e7eb';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = 'transparent';
                  }}
                >
                  <ChevronDown size={14} />
                </button>
              </div>
            )}
            
            {/* Delete button only for custom sections */}
            {section.id.startsWith('custom-') && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  removeSection(section.id);
                }}
                style={{
                  background: '#fee2e2',
                  border: 'none',
                  cursor: 'pointer',
                  padding: '0.5rem',
                  color: '#ef4444',
                  borderRadius: '6px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s ease'
                }}
                title="Delete"
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = '#fecaca';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = '#fee2e2';
                }}
              >
                <Trash2 size={16} />
              </button>
            )}
          </div>
        )}
        {renderSectionContent()}
      </div>
    );
  };

  // Enhanced Customization Panel
  const CustomizationPanel = () => {
    const currentSection = [...sections, ...customSections].find(s => s.id === selectedSection);
    const isDark = profileTheme.backgroundColor === '#1e293b' || profileTheme.backgroundColor === '#0f172a';
    const panelBg = isDark ? '#0f172a' : 'white';
    const panelText = isDark ? '#e2e8f0' : '#334155';
    const panelHeading = isDark ? '#f1f5f9' : '#0f172a';
    
    return (
      <div
        ref={customizationPanelRef}
        style={{
          position: 'fixed',
          right: isCustomizing ? '0' : '-500px',
          top: '0',
          width: window.innerWidth < 768 ? '100vw' : 'min(500px, 42vw)',
          height: '100vh',
          background: panelBg,
          boxShadow: isCustomizing ? '-20px 0 40px rgba(0, 0, 0, 0.15)' : 'none',
          transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
          zIndex: 1000,
          display: 'flex',
          flexDirection: 'column',
          overflow: 'hidden',
          color: panelText,
          backdropFilter: 'blur(20px)',
          borderLeft: isCustomizing ? `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)'}` : 'none'
        }}
      >
        {/* Header */}
        <div style={{
          padding: '1.5rem',
          borderBottom: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
          background: isDark ? '#1e293b' : '#f8fafc'
        }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '1.5rem'
          }}>
            <h2 style={{
              fontSize: '1.5rem',
              fontWeight: '700',
              margin: 0,
              display: 'flex',
              alignItems: 'center',
              gap: '0.75rem',
              color: panelHeading
            }}>
              <Wand2 size={24} color={profileTheme.primaryColor} />
              Profile Studio
            </h2>
            <button
              onClick={() => {
                setIsCustomizing(false);
                setSelectedSection(null);
                setSelectedText(null);
              }}
              style={{
                background: 'transparent',
                border: 'none',
                cursor: 'pointer',
                padding: '0.5rem',
                borderRadius: '8px',
                transition: 'all 0.2s ease',
                color: panelText
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.1)' : '#f3f4f6';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'transparent';
              }}
            >
              <X size={20} />
            </button>
          </div>
          
          {/* Panel Tabs - Single Row, Compact */}
          <div style={{ display: 'flex', gap: '0.25rem', flexWrap: 'wrap' }}>
            {[
              { id: 'themes', label: 'Themes', icon: Palette },
              { id: 'typography', label: 'Typography', icon: Type },
              { id: 'effects', label: 'Visual Effects', icon: Sparkles },
              { id: 'sections', label: 'Add Section', icon: Plus },
              ...(selectedSection ? [{ id: 'editor', label: 'Editor', icon: Edit3 }] : [])
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setCustomizationTab(tab.id)}
                style={{
                  flex: 1,
                  minWidth: '0',
                  padding: '0.5rem 0.25rem',
                  background: customizationTab === tab.id 
                    ? `linear-gradient(135deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`
                    : 'transparent',
                  color: customizationTab === tab.id ? 'white' : panelText,
                  border: customizationTab === tab.id 
                    ? 'none'
                    : `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                  borderRadius: '6px',
                  cursor: 'pointer',
                  fontSize: '0.65rem',
                  fontWeight: '600',
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  gap: '0.25rem',
                  transition: 'all 0.2s ease',
                  transform: customizationTab === tab.id ? 'scale(1.02)' : 'scale(1)',
                  minHeight: '50px'
                }}
                onMouseEnter={(e) => {
                  if (customizationTab !== tab.id) {
                    e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.05)' : '#f3f4f6';
                  }
                }}
                onMouseLeave={(e) => {
                  if (customizationTab !== tab.id) {
                    e.currentTarget.style.background = 'transparent';
                  }
                }}
              >
                <tab.icon size={14} />
                <span style={{ 
                  fontSize: '0.6rem', 
                  textAlign: 'center',
                  lineHeight: '1.1',
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap',
                  maxWidth: '100%'
                }}>
                  {tab.label}
                </span>
              </button>
            ))}
          </div>
        </div>

        {/* Panel Content */}
        <div
          style={{
            flex: 1,
            padding: '1.25rem',
            overflowY: 'auto',
            overflowX: 'hidden',
            scrollbarWidth: 'thin',
            scrollbarColor: `${profileTheme.primaryColor}20 transparent`
          }}
        >
          {customizationTab === 'sections' && (
            <div style={{ display: 'grid', gap: '1.5rem' }}>
                <h3 style={{ 
                  fontSize: '0.875rem', 
                  fontWeight: '600', 
                marginBottom: '0.75rem', 
                color: panelHeading,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                <Plus size={16} color={profileTheme.primaryColor} />
                Add New Section
                </h3>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '0.5rem' }}>
                {[
                  { type: 'experience', label: 'Experience', icon: '💼', description: 'Work history' },
                  { type: 'education', label: 'Education', icon: '🎓', description: 'Academic background' },
                  { type: 'skills', label: 'Skills', icon: '⚡', description: 'Technical skills' },
                  { type: 'projects', label: 'Projects', icon: '🚀', description: 'Portfolio projects' },
                  { type: 'achievements', label: 'Achievements', icon: '🏆', description: 'Awards' },
                  { type: 'testimonials', label: 'Testimonials', icon: '💬', description: 'Client reviews' },
                  { type: 'faq', label: 'FAQ', icon: '❓', description: 'Questions' }
                ].map(section => (
                      <button
                    key={section.type}
                    onClick={() => addCustomSection(section.type)}
                        style={{
                      padding: '0.75rem',
                      background: isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb',
                      border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                          borderRadius: '6px',
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                      textAlign: 'left',
                          display: 'flex',
                          alignItems: 'center',
                      gap: '0.5rem'
                        }}
                        onMouseEnter={(e) => {
                      e.currentTarget.style.background = `${profileTheme.primaryColor}10`;
                      e.currentTarget.style.borderColor = profileTheme.primaryColor;
                        }}
                        onMouseLeave={(e) => {
                      e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb';
                      e.currentTarget.style.borderColor = isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb';
                    }}
                  >
                    <span style={{ fontSize: '1rem' }}>{section.icon}</span>
                <div>
                      <div style={{ 
                      fontSize: '0.75rem',
                        fontWeight: '600', 
                      color: panelText,
                        marginBottom: '0.125rem'
                      }}>
                        {section.label}
                </div>
                      <div style={{ 
                        fontSize: '0.625rem', 
                        color: panelText,
                        opacity: 0.7
                      }}>
                        {section.description}
                  </div>
                </div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {customizationTab === 'themes' && (
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', height: 'calc(100vh - 200px)', overflowY: 'auto' }}>
              {/* Left Column - Colors & Presets */}
              <div style={{ display: 'grid', gap: '1rem' }}>
                {/* Custom Colors */}
                <div>
                  <h3 style={{ 
                    fontSize: '0.8rem', 
                    fontWeight: '600', 
                    marginBottom: '0.5rem', 
                    color: panelHeading,
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
                  }}>
                    <Palette size={14} color={profileTheme.primaryColor} />
                    Colors
                  </h3>
                  <div style={{ display: 'grid', gap: '0.375rem' }}>
                    {[
                      { label: 'Background', key: 'backgroundColor', icon: '🎨' },
                      { label: 'Primary', key: 'primaryColor', icon: '🔵' },
                      { label: 'Secondary', key: 'secondaryColor', icon: '🟦' }
                    ].map(({ label, key, icon }) => (
                      <div key={key} style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                        padding: '0.5rem',
                        background: isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb',
                        borderRadius: '6px',
                        transition: 'all 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.08)' : '#f3f4f6';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb';
                      }}>
                        <span style={{ fontSize: '0.75rem' }}>{icon}</span>
                        <label style={{ flex: 1, fontSize: '0.65rem', fontWeight: '500', color: panelText, minWidth: 0 }}>{label}</label>
                        <input
                          type="color"
                          value={profileTheme[key]}
                          onChange={(e) => {
                            if (key === 'backgroundColor' && e.target.value !== '#0f172a' && e.target.value !== '#1e293b' && (profileTheme.backgroundColor === '#0f172a' || profileTheme.backgroundColor === '#1e293b')) {
                              setProfileTheme(prev => ({
                                ...prev,
                                [key]: e.target.value,
                                headingColor: '#1e293b',
                                paragraphColor: '#475569'
                              }));
                            } else {
                              setProfileTheme(prev => ({ ...prev, [key]: e.target.value }));
                            }
                          }}
                          style={{
                            width: '20px',
                            height: '20px',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: 'pointer',
                            boxShadow: '0 1px 4px rgba(0,0,0,0.1)',
                            flexShrink: 0
                          }}
                        />
                      </div>
                    ))}
                  </div>
                </div>

               
              </div>

              {/* Right Column - Text Colors & Effects */}
              <div style={{ display: 'grid', gap: '1rem' }}>
                {/* Text Colors */}
                <div>
                  <h3 style={{ 
                    fontSize: '0.8rem', 
                    fontWeight: '600', 
                    marginBottom: '0.5rem', 
                    color: panelHeading,
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
                  }}>
                    <Type size={14} color={profileTheme.primaryColor} />
                    Text
                  </h3>
                  <div style={{ display: 'grid', gap: '0.375rem' }}>
                    {[
                      { label: 'Headings', key: 'headingColor', icon: '📝' },
                      { label: 'Body Text', key: 'paragraphColor', icon: '📄' }
                    ].map(({ label, key, icon }) => (
                      <div key={key} style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                        padding: '0.5rem',
                        background: isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb',
                        borderRadius: '6px',
                        transition: 'all 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.08)' : '#f3f4f6';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb';
                      }}>
                        <span style={{ fontSize: '0.75rem' }}>{icon}</span>
                        <label style={{ flex: 1, fontSize: '0.65rem', fontWeight: '500', color: panelText, minWidth: 0 }}>{label}</label>
                        <input
                          type="color"
                          value={profileTheme[key]}
                          onChange={(e) => setProfileTheme(prev => ({ ...prev, [key]: e.target.value }))}
                          style={{
                            width: '20px',
                            height: '20px',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: 'pointer',
                            boxShadow: '0 1px 4px rgba(0,0,0,0.1)',
                            flexShrink: 0
                          }}
                        />
                      </div>
                    ))}
                  </div>
                </div>

                
              </div>
            </div>
          )}

          {customizationTab === 'typography' && (
            <div style={{ display: 'grid', gap: '1.5rem' }}>
              {/* Font Selection */}
              <div>
                <h3 style={{ 
                  fontSize: '0.875rem', 
                  fontWeight: '600', 
                  marginBottom: '0.75rem', 
                  color: panelHeading,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <Type size={16} color={profileTheme.primaryColor} />
                  Font Family
                </h3>
                <select
                  value={profileTheme.fontFamily}
                  onChange={(e) => setProfileTheme(prev => ({ ...prev, fontFamily: e.target.value, bodyFont: e.target.value, headingFont: e.target.value }))}
                      style={{
                    width: '100%',
                    padding: '0.75rem',
                    borderRadius: '8px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                    background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                    fontSize: '0.875rem',
                    color: panelText
                  }}
                >
                  <option value="Inter">Inter</option>
                  <option value="Roboto">Roboto</option>
                  <option value="Open Sans">Open Sans</option>
                  <option value="Poppins">Poppins</option>
                  <option value="Lato">Lato</option>
                  <option value="Montserrat">Montserrat</option>
                  <option value="Raleway">Raleway</option>
                  <option value="Nunito">Nunito</option>
                  <option value="Source Sans Pro">Source Sans Pro</option>
                  <option value="PT Sans">PT Sans</option>
                  <option value="Ubuntu">Ubuntu</option>
                  <option value="Merriweather">Merriweather</option>
                  <option value="Playfair Display">Playfair Display</option>
                  <option value="Space Grotesk">Space Grotesk</option>
                  <option value="DM Sans">DM Sans</option>
                </select>
                      </div>

              {/* Text Alignment */}
              <div>
                <h3 style={{ 
                          fontSize: '0.875rem',
                          fontWeight: '600',
                  marginBottom: '0.75rem', 
                          color: panelHeading,
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem'
                        }}>
                  <AlignLeft size={16} color={profileTheme.primaryColor} />
                  Text Alignment
                </h3>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '0.5rem' }}>
                  {[
                    { value: 'left', icon: AlignLeft, label: 'Left' },
                    { value: 'center', icon: AlignCenter, label: 'Center' },
                    { value: 'right', icon: AlignRight, label: 'Right' },
                    { value: 'justify', icon: AlignJustify, label: 'Justify' }
                  ].map(align => (
                      <button
                      key={align.value}
                      onClick={() => setProfileTheme(prev => ({ ...prev, textAlign: align.value }))}
                        style={{
                        padding: '0.75rem',
                        background: profileTheme.textAlign === align.value 
                          ? profileTheme.primaryColor 
                          : isDark ? 'rgba(255,255,255,0.05)' : '#f3f4f6',
                        color: profileTheme.textAlign === align.value 
                          ? 'white' 
                          : panelText,
                          border: 'none',
                        borderRadius: '6px',
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                          display: 'flex',
                          alignItems: 'center',
                        justifyContent: 'center'
                        }}
                        onMouseEnter={(e) => {
                        if (profileTheme.textAlign !== align.value) {
                          e.currentTarget.style.background = `${profileTheme.primaryColor}20`;
                        }
                        }}
                        onMouseLeave={(e) => {
                        if (profileTheme.textAlign !== align.value) {
                          e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.05)' : '#f3f4f6';
                        }
                        }}
                      >
                      <align.icon size={16} />
                      </button>
                  ))}
                </div>
              </div>

              {/* Text Decoration */}
              <div>
                <h3 style={{ 
                  fontSize: '0.875rem', 
                  fontWeight: '600', 
                  marginBottom: '0.75rem', 
                  color: panelHeading,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <Bold size={16} color={profileTheme.primaryColor} />
                  Text Decoration
                </h3>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '0.5rem' }}>
                  {[
                    { value: 'bold', icon: Bold, property: 'fontWeight', activeValue: 'bold', defaultValue: 'normal', label: 'Bold' },
                    { value: 'italic', icon: Italic, property: 'fontStyle', activeValue: 'italic', defaultValue: 'normal', label: 'Italic' },
                    { value: 'underline', icon: Underline, property: 'textDecoration', activeValue: 'underline', defaultValue: 'none', label: 'Underline' }
                  ].map(decoration => (
                    <button
                      key={decoration.value}
                      onClick={() => setProfileTheme(prev => ({ 
                        ...prev, 
                        [decoration.property]: prev[decoration.property] === decoration.activeValue 
                          ? decoration.defaultValue 
                          : decoration.activeValue 
                      }))}
                  style={{
                        padding: '0.75rem',
                        background: profileTheme[decoration.property] === decoration.activeValue 
                          ? profileTheme.primaryColor 
                          : isDark ? 'rgba(255,255,255,0.05)' : '#f3f4f6',
                        color: profileTheme[decoration.property] === decoration.activeValue 
                          ? 'white' 
                          : panelText,
                        border: 'none',
                    borderRadius: '6px',
                        cursor: 'pointer',
                        transition: 'all 0.2s ease',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                      onMouseEnter={(e) => {
                        if (profileTheme[decoration.property] !== decoration.activeValue) {
                          e.currentTarget.style.background = `${profileTheme.primaryColor}20`;
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (profileTheme[decoration.property] !== decoration.activeValue) {
                          e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.05)' : '#f3f4f6';
                        }
                      }}
                    >
                      <decoration.icon size={16} />
                    </button>
                  ))}
              </div>
              </div>
            </div>
          )}
              
          {customizationTab === 'effects' && (
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', height: 'calc(100vh - 200px)', overflowY: 'auto' }}>
              {/* Left Column - Animations */}
              <div style={{ display: 'grid', gap: '1rem' }}>
                {/* Background Animation */}
                <div>
                  <h3 style={{ 
                    fontSize: '0.8rem', 
                    fontWeight: '600', 
                    marginBottom: '0.5rem', 
                    color: panelHeading,
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
                  }}>
                    <Sparkles size={14} color={profileTheme.primaryColor} />
                    Animations
                  </h3>
                  <div style={{ display: 'grid', gap: '0.375rem' }}>
                    <label style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      padding: '0.5rem',
                      background: isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '0.65rem'
                    }}>
                      <span style={{ color: panelText, fontWeight: '500' }}>Enable Background Animation</span>
                      <input
                        type="checkbox"
                        checked={profileTheme.backgroundAnimation || false}
                        onChange={(e) => setProfileTheme(prev => ({ ...prev, backgroundAnimation: e.target.checked }))}
                        style={{ transform: 'scale(0.8)', accentColor: profileTheme.primaryColor }}
                      />
                    </label>
                    
                    {profileTheme.backgroundAnimation && (
                      <div>
                        <label style={{ fontSize: '0.65rem', color: panelText, marginBottom: '0.25rem', display: 'block', fontWeight: '500' }}>
                          Animation Type
                        </label>
                        <select
                          value={profileTheme.animationType || 'hearts'}
                          onChange={(e) => setProfileTheme(prev => ({ ...prev, animationType: e.target.value }))}
                          style={{
                            width: '100%',
                            padding: '0.5rem',
                            borderRadius: '6px',
                            border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                            background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                            fontSize: '0.65rem',
                            color: panelText
                          }}
                        >
                          <option value="hearts">❤️ Hearts</option>
                          <option value="stars">⭐ Stars</option>
                          <option value="bubbles">🫧 Bubbles</option>
                          <option value="snowflakes">❄️ Snowflakes</option>
                          <option value="confetti">🎊 Confetti</option>
                          <option value="flowers">🌸 Flowers</option>
                          <option value="sparkles">✨ Sparkles</option>
                        </select>
                      </div>
                    )}

                    <label style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      padding: '0.5rem',
                      background: isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '0.65rem'
                    }}>
                      <span style={{ color: panelText, fontWeight: '500' }}>Hover Effects</span>
                      <input
                        type="checkbox"
                        checked={profileTheme.hoverEffects || false}
                        onChange={(e) => setProfileTheme(prev => ({ ...prev, hoverEffects: e.target.checked }))}
                        style={{ transform: 'scale(0.8)', accentColor: profileTheme.primaryColor }}
                      />
                    </label>
                  </div>
                </div>
              </div>
              
              {/* Right Column - Shadows & Borders */}
              <div style={{ display: 'grid', gap: '1rem' }}>
                <div>
                  <h3 style={{ 
                    fontSize: '0.8rem', 
                    fontWeight: '600', 
                    marginBottom: '0.5rem', 
                    color: panelHeading,
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
                  }}>
                    <Square size={14} color={profileTheme.primaryColor} />
                    Shadows & Borders
                  </h3>
                  <div style={{ display: 'grid', gap: '0.375rem' }}>
                    <div>
                      <label style={{ fontSize: '0.65rem', color: panelText, marginBottom: '0.25rem', display: 'block', fontWeight: '500' }}>
                        Border Radius
                      </label>
                      <select
                        value={profileTheme.borderRadius}
                        onChange={(e) => setProfileTheme(prev => ({ ...prev, borderRadius: e.target.value }))}
                        style={{
                          width: '100%',
                          padding: '0.5rem',
                          borderRadius: '6px',
                          border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                          background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                          fontSize: '0.65rem',
                          color: panelText
                        }}
                      >
                        <option value="none">None</option>
                        <option value="small">Small</option>
                        <option value="rounded">Medium</option>
                        <option value="large">Large</option>
                      </select>
                    </div>
                    <div>
                      <label style={{ fontSize: '0.65rem', color: panelText, marginBottom: '0.25rem', display: 'block', fontWeight: '500' }}>
                        Shadow Style
                      </label>
                      <select
                        value={profileTheme.shadowStyle}
                        onChange={(e) => setProfileTheme(prev => ({ ...prev, shadowStyle: e.target.value }))}
                        style={{
                          width: '100%',
                          padding: '0.5rem',
                          borderRadius: '6px',
                          border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                          background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                          fontSize: '0.65rem',
                          color: panelText
                        }}
                      >
                        <option value="none">None</option>
                        <option value="subtle">Subtle</option>
                        <option value="medium">Medium</option>
                        <option value="strong">Strong</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          

          {customizationTab === 'style' && (
            <div>
              {/* Typography */}
              <div style={{ marginBottom: '2rem' }}>
                <h3 style={{ 
                  fontSize: '1rem', 
                  fontWeight: '600', 
                  marginBottom: '1rem', 
                  color: panelHeading,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <Type size={18} color={profileTheme.primaryColor} />
                  Typography
                </h3>
                <div style={{ display: 'grid', gap: '1rem' }}>
                  <div>
                    <label style={{ fontSize: '0.875rem', marginBottom: '0.5rem', display: 'block', color: panelText, fontWeight: '500' }}>
                      Primary Font
                    </label>
                    <select
                      value={profileTheme.fontFamily}
                      onChange={(e) => setProfileTheme(prev => ({ ...prev, fontFamily: e.target.value, bodyFont: e.target.value }))}
                      style={{
                        width: '100%',
                        padding: '0.875rem',
                        borderRadius: '8px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                        background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                        cursor: 'pointer',
                        fontSize: '0.875rem',
                        color: panelText
                      }}
                    >
                      {fontOptions.map(font => (
                        <option key={font.value} value={font.value}>
                          {font.label} - {font.preview}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', marginBottom: '0.5rem', display: 'block', color: panelText, fontWeight: '500' }}>
                      Heading Font
                    </label>
                    <select
                      value={profileTheme.headingFont}
                      onChange={(e) => setProfileTheme(prev => ({ ...prev, headingFont: e.target.value }))}
                      style={{
                        width: '100%',
                        padding: '0.875rem',
                        borderRadius: '8px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                        background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                        cursor: 'pointer',
                        fontSize: '0.875rem',
                        color: panelText
                      }}
                    >
                      {fontOptions.map(font => (
                        <option key={font.value} value={font.value}>
                          {font.label} - {font.preview}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              {/* Effects */}
              <div style={{ marginBottom: '2rem' }}>
                <h3 style={{ 
                  fontSize: '1rem', 
                  fontWeight: '600', 
                  marginBottom: '1rem', 
                  color: panelHeading,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <Sparkles size={18} color={profileTheme.primaryColor} />
                  Visual Effects
                </h3>
                <div style={{ display: 'grid', gap: '0.75rem' }}>
                  {[
                    { label: 'Glass Morphism', key: 'glassEffect', description: 'Frosted glass appearance' },
                    { label: 'Neon Glow', key: 'neonEffect', description: 'Glowing elements' },
                    { label: 'Smooth Animations', key: 'animations', description: 'Element transitions' },
                    { label: 'Hover Effects', key: 'hoverEffects', description: 'Interactive feedback' }
                  ].map(({ label, key, description }) => (
                    <label key={key} style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      padding: '1rem',
                      cursor: 'pointer',
                      background: isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb',
                      borderRadius: '8px',
                      transition: 'all 0.2s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = `${profileTheme.primaryColor}10`;
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = isDark ? 'rgba(255,255,255,0.05)' : '#f9fafb';
                    }}>
                      <div>
                        <div style={{ fontSize: '0.875rem', fontWeight: '500', color: panelText }}>{label}</div>
                        <div style={{ fontSize: '0.75rem', opacity: 0.6, marginTop: '0.25rem' }}>{description}</div>
                      </div>
                      <div
                        onClick={() => setProfileTheme(prev => ({ ...prev, [key]: !prev[key] }))}
                        style={{
                          width: '44px',
                          height: '24px',
                          background: profileTheme[key] 
                            ? `linear-gradient(135deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`
                            : isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb',
                          borderRadius: '12px',
                          position: 'relative',
                          transition: 'all 0.3s ease',
                          cursor: 'pointer',
                          boxShadow: profileTheme[key] ? '0 2px 8px rgba(0,0,0,0.15)' : 'none'
                        }}
                      >
                        <div style={{
                          width: '20px',
                          height: '20px',
                          background: 'white',
                          borderRadius: '50%',
                          position: 'absolute',
                          top: '2px',
                          left: profileTheme[key] ? '22px' : '2px',
                          transition: 'all 0.3s ease',
                          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'
                        }} />
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              {/* Layout Options */}
              <div>
                <h3 style={{ 
                  fontSize: '1rem', 
                  fontWeight: '600', 
                  marginBottom: '1rem', 
                  color: panelHeading,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <Layout size={18} color={profileTheme.primaryColor} />
                  Layout & Spacing
                </h3>
                <div style={{ display: 'grid', gap: '1rem' }}>
                  <div>
                    <label style={{ fontSize: '0.875rem', marginBottom: '0.5rem', display: 'block', color: panelText, fontWeight: '500' }}>
                      Corner Radius
                    </label>
                    <select
                      value={profileTheme.borderRadius}
                      onChange={(e) => setProfileTheme(prev => ({ ...prev, borderRadius: e.target.value }))}
                      style={{
                        width: '100%',
                        padding: '0.75rem',
                        borderRadius: '8px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                        background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                        fontSize: '0.875rem',
                        color: panelText
                      }}
                    >
                      <option value="none">Sharp Corners</option>
                      <option value="small">Slightly Rounded</option>
                      <option value="rounded">Rounded</option>
                      <option value="large">Very Rounded</option>
                    </select>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', marginBottom: '0.5rem', display: 'block', color: panelText, fontWeight: '500' }}>
                      Shadow Intensity
                    </label>
                    <select
                      value={profileTheme.shadowStyle}
                      onChange={(e) => setProfileTheme(prev => ({ ...prev, shadowStyle: e.target.value }))}
                      style={{
                        width: '100%',
                        padding: '0.75rem',
                        borderRadius: '8px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                        background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                        fontSize: '0.875rem',
                        color: panelText
                      }}
                    >
                      <option value="none">No Shadow</option>
                      <option value="subtle">Subtle</option>
                      <option value="medium">Medium</option>
                      <option value="dramatic">Dramatic</option>
                    </select>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', marginBottom: '0.5rem', display: 'block', color: panelText, fontWeight: '500' }}>
                      Section Spacing
                    </label>
                    <select
                      value={profileTheme.sectionSpacing}
                      onChange={(e) => setProfileTheme(prev => ({ ...prev, sectionSpacing: e.target.value }))}
                      style={{
                        width: '100%',
                        padding: '0.75rem',
                        borderRadius: '8px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                        background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                        fontSize: '0.875rem',
                        color: panelText
                      }}
                    >
                      <option value="1rem">Compact</option>
                      <option value="2rem">Normal</option>
                      <option value="3rem">Spacious</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
          )}

          {customizationTab === 'editor' && currentSection && (
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: '1fr 1fr', 
              gap: '1rem',
              height: 'calc(100vh - 200px)',
              overflow: 'hidden'
            }}>
              {/* Left Column - General Settings */}
              <div style={{ 
                display: 'flex', 
                flexDirection: 'column', 
                gap: '1rem',
                overflow: 'auto',
                paddingRight: '0.5rem'
              }}>


                {/* Section Background */}
                <div>
                  <h3 style={{ fontSize: '0.8rem', fontWeight: '600', marginBottom: '0.75rem', color: panelHeading }}>
                    Section Appearance
                  </h3>
                  <div>
                    <label style={{ fontSize: '0.7rem', marginBottom: '0.375rem', display: 'block', color: panelText }}>
                      Background
                    </label>
                    <select
                      value={currentSection.style.background}
                      onChange={(e) => updateSectionStyle(currentSection.id, 'background', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '0.5rem',
                        borderRadius: '6px',
                        border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                        background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                        fontSize: '0.75rem',
                        color: panelText
                      }}
                    >
                      {backgroundOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.preview} {option.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                            </div>

              {/* Right Column - Section-Specific Settings */}
              <div style={{ 
                display: 'flex', 
                flexDirection: 'column', 
                gap: '1rem',
                overflow: 'auto',
                paddingLeft: '0.5rem'
              }}>
                {/* Header Settings */}
                {currentSection.type === 'header' && (
                  <div>
                    <h3 style={{ 
                      fontSize: '0.8rem', 
                      fontWeight: '600', 
                      marginBottom: '0.75rem', 
                      color: panelHeading,
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.375rem'
                    }}>
                      <Settings size={14} />
                      Header Settings
                    </h3>
                    <div style={{ display: 'grid', gap: '0.75rem' }}>
                      <div>
                        <label style={{ fontSize: '0.7rem', marginBottom: '0.375rem', display: 'block', color: panelText }}>
                          Background Style
                        </label>
                        <select
                          value={currentSection.style.background}
                          onChange={(e) => updateSectionStyle(currentSection.id, 'background', e.target.value)}
                          style={{
                            width: '100%',
                            padding: '0.5rem',
                            borderRadius: '6px',
                            border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                            background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                            fontSize: '0.75rem',
                            color: panelText
                          }}
                        >
                          <option value="gradient">Primary Gradient</option>
                          {backgroundOptions.map(option => (
                            <option key={option.value} value={option.value}>
                              {option.preview} {option.label}
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      {currentSection.settings.showAvatar && (
                        <div>
                          <label style={{ fontSize: '0.7rem', marginBottom: '0.375rem', display: 'block', color: panelText }}>
                            Avatar Shape
                          </label>
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '0.25rem' }}>
                            {[
                              { value: 'circle', icon: '⭕' },
                              { value: 'square', icon: '⬜' },
                              { value: 'rounded', icon: '🔲' }
                            ].map(shape => (
                              <button
                                key={shape.value}
                                onClick={() => updateSectionSettings(currentSection.id, 'avatarShape', shape.value)}
                                style={{
                                  padding: '0.5rem',
                                  background: currentSection.settings.avatarShape === shape.value 
                                    ? profileTheme.primaryColor 
                                    : isDark ? 'rgba(255,255,255,0.05)' : '#f3f4f6',
                                  color: currentSection.settings.avatarShape === shape.value 
                                    ? 'white' 
                                    : panelText,
                                  border: 'none',
                                  borderRadius: '4px',
                                  cursor: 'pointer',
                                  fontSize: '1rem',
                                  transition: 'all 0.2s ease'
                                }}
                              >
                                {shape.icon}
                              </button>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Projects Settings */}
                {currentSection.type === 'projects' && (
                  <div>
                    <h3 style={{ fontSize: '0.8rem', fontWeight: '600', marginBottom: '0.75rem', color: panelHeading }}>
                      Projects Display
                    </h3>
                    <div style={{ display: 'grid', gap: '0.5rem' }}>
                      {[
                        { label: 'Show Images', key: 'showImages', icon: '🖼️' },
                        { label: 'Show Description', key: 'showDescription', icon: '📝' },
                        { label: 'Show Date', key: 'showDate', icon: '📅' },
                      ].map(({ label, key, icon }) => (
                        <label key={key} style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          padding: '0.5rem',
                          background: isDark ? 'rgba(255,255,255,0.03)' : '#fafbfc',
                          borderRadius: '4px',
                          cursor: 'pointer'
                        }}>
                          <span style={{ fontSize: '0.7rem', color: panelText }}>
                            {icon} {label}
                          </span>
                          <input
                            type="checkbox"
                            checked={currentSection.settings[key] || false}
                            onChange={(e) => updateSectionSettings(currentSection.id, key, e.target.checked)}
                            style={{ transform: 'scale(0.8)' }}
                          />
                        </label>
                      ))}
                    </div>
                  </div>
                )}

                {/* Experience Settings */}
                {currentSection.type === 'experience' && (
                  <div>
                    <h3 style={{ fontSize: '0.8rem', fontWeight: '600', marginBottom: '0.75rem', color: panelHeading }}>
                      Experience Display
                    </h3>
                    <div style={{ display: 'grid', gap: '0.5rem' }}>
                      {[
                        { label: 'Show Dates', key: 'showDates' },
                        { label: 'Show Location', key: 'showLocation' },
                        { label: 'Show Company', key: 'showCompany' },
                        { label: 'Show Achievements', key: 'showAchievements' },
                        { label: 'Timeline View', key: 'timeline' }
                      ].map(({ label, key }) => (
                        <label key={key} style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          padding: '0.5rem',
                          background: isDark ? 'rgba(255,255,255,0.03)' : '#fafbfc',
                          borderRadius: '4px',
                          cursor: 'pointer'
                        }}>
                          <span style={{ fontSize: '0.7rem', color: panelText }}>{label}</span>
                          <input
                            type="checkbox"
                            checked={currentSection.settings[key] || false}
                            onChange={(e) => updateSectionSettings(currentSection.id, key, e.target.checked)}
                            style={{ transform: 'scale(0.8)' }}
                          />
                        </label>
                      ))}
                    </div>
                  </div>
                )}

                {/* Education Settings */}
                {currentSection.type === 'education' && (
                  <div>
                    <h3 style={{ fontSize: '0.8rem', fontWeight: '600', marginBottom: '0.75rem', color: panelHeading }}>
                      Education Display
                    </h3>
                    <div style={{ display: 'grid', gap: '0.5rem' }}>
                      {[
                        { label: 'Show Year', key: 'showYear' },
                        { label: 'Show Location', key: 'showLocation' },
                        { label: 'Show GPA', key: 'showGPA' },
                        { label: 'Show Honors', key: 'showHonors' },
                        { label: 'Show Logo', key: 'showLogo' }
                      ].map(({ label, key }) => (
                        <label key={key} style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          padding: '0.5rem',
                          background: isDark ? 'rgba(255,255,255,0.03)' : '#fafbfc',
                          borderRadius: '4px',
                          cursor: 'pointer'
                        }}>
                          <span style={{ fontSize: '0.7rem', color: panelText }}>{label}</span>
                          <input
                            type="checkbox"
                            checked={currentSection.settings[key] || false}
                            onChange={(e) => updateSectionSettings(currentSection.id, key, e.target.checked)}
                            style={{ transform: 'scale(0.8)' }}
                          />
                        </label>
                      ))}
                    </div>
                  </div>
                )}

                {/* Achievements Settings */}
                {currentSection.type === 'achievements' && (
                  <div>
                    <h3 style={{ fontSize: '0.8rem', fontWeight: '600', marginBottom: '0.75rem', color: panelHeading }}>
                      Achievements Layout
                    </h3>
                    <div style={{ marginBottom: '0.75rem' }}>
                      <label style={{ fontSize: '0.7rem', marginBottom: '0.375rem', display: 'block', color: panelText }}>
                        Display Style
                      </label>
                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '0.25rem' }}>
                        {[
                          { value: 'list', label: 'List', icon: <List size={16} /> },
                          { value: 'grid', label: 'Grid', icon: <Grid size={16} /> },
                          { value: 'cards', label: 'Cards', icon: <Square size={16} /> },
                          { value: 'timeline', label: 'Timeline', icon: <Activity size={16} /> }
                        ].map(layout => (
                          <button
                            key={layout.value}
                            onClick={() => updateSectionSettings(currentSection.id, 'layout', layout.value)}
                            style={{
                              padding: '0.5rem',
                              background: currentSection.settings.layout === layout.value 
                                ? profileTheme.primaryColor 
                                : isDark ? 'rgba(255,255,255,0.05)' : '#f3f4f6',
                              color: currentSection.settings.layout === layout.value 
                                ? 'white' 
                                : panelText,
                              border: 'none',
                              borderRadius: '4px',
                              cursor: 'pointer',
                              display: 'flex',
                              flexDirection: 'column',
                              alignItems: 'center',
                              gap: '0.25rem',
                              fontSize: '0.65rem',
                              fontWeight: '500',
                              transition: 'all 0.2s ease'
                            }}
                          >
                            {layout.icon}
                            {layout.label}
                          </button>
                        ))}
                      </div>
                    </div>
                    <div style={{ display: 'grid', gap: '0.5rem' }}>
                      {[
                        { label: 'Show Date', key: 'showDate' },
                        { label: 'Show Description', key: 'showDescription' },
                        { label: 'Show Issuer', key: 'showIssuer' },
                        { label: 'Show Link', key: 'showLink' }
                      ].map(({ label, key }) => (
                        <label key={key} style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          padding: '0.5rem',
                          background: isDark ? 'rgba(255,255,255,0.03)' : '#fafbfc',
                          borderRadius: '4px',
                          cursor: 'pointer'
                        }}>
                          <span style={{ fontSize: '0.7rem', color: panelText }}>{label}</span>
                          <input
                            type="checkbox"
                            checked={currentSection.settings[key] || false}
                            onChange={(e) => updateSectionSettings(currentSection.id, key, e.target.checked)}
                            style={{ transform: 'scale(0.8)' }}
                          />
                        </label>
                      ))}
                    </div>
                  </div>
                )}

                {/* FAQ Settings */}
                {currentSection.type === 'faq' && (
                  <div>
                    <h3 style={{ fontSize: '0.8rem', fontWeight: '600', marginBottom: '0.75rem', color: panelHeading }}>
                      FAQ Settings
                    </h3>
                    <div style={{ display: 'grid', gap: '0.5rem' }}>
                      <label style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'space-between',
                        padding: '0.5rem',
                        background: isDark ? 'rgba(255,255,255,0.03)' : '#fafbfc',
                        borderRadius: '4px',
                        cursor: 'pointer'
                      }}>
                        <div>
                          <div style={{ fontSize: '0.7rem', color: panelText }}>Collapsible Answers</div>
                          <div style={{ fontSize: '0.6rem', opacity: 0.6, marginTop: '0.125rem' }}>
                            Click questions to expand/collapse
                          </div>
                        </div>
                        <input
                          type="checkbox"
                          checked={currentSection.settings.collapsible}
                          onChange={(e) => updateSectionSettings(currentSection.id, 'collapsible', e.target.checked)}
                          style={{ transform: 'scale(0.8)' }}
                        />
                      </label>
                      <label style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'space-between',
                        padding: '0.5rem',
                        background: isDark ? 'rgba(255,255,255,0.03)' : '#fafbfc',
                        borderRadius: '4px',
                        cursor: 'pointer'
                      }}>
                        <input
                          type="checkbox"
                          checked={currentSection.settings.showCategories || false}
                          onChange={(e) => updateSectionSettings(currentSection.id, 'showCategories', e.target.checked)}
                          style={{ transform: 'scale(0.8)' }}
                        />
                      </label>
                    </div>
                  </div>
                )}

                {/* Skills Settings */}
                {currentSection.type === 'skills' && (
                  <div>
                    <h3 style={{ fontSize: '0.8rem', fontWeight: '600', marginBottom: '0.75rem', color: panelHeading }}>
                      Skills Display
                    </h3>
                    <div style={{ marginBottom: '0.75rem' }}>
                      <label style={{ fontSize: '0.7rem', marginBottom: '0.375rem', display: 'block', color: panelText }}>
                        Layout Style
                      </label>
                      <select
                        value={currentSection.settings.layout || 'bars'}
                        onChange={(e) => updateSectionSettings(currentSection.id, 'layout', e.target.value)}
                        style={{
                          width: '100%',
                          padding: '0.75rem',
                          borderRadius: '6px',
                          border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                          background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                          fontSize: '0.75rem',
                          color: panelText
                        }}
                      >
                        <option value="bars">Progress Bars</option>
                        <option value="cards">Card Layout</option>
                      </select>
                    </div>
                  
                    {currentSection.settings.layout !== 'cards' && (
                      <>
                        <div style={{ marginTop: '0.75rem' }}>
                          <label style={{ fontSize: '0.7rem', marginBottom: '0.5rem', display: 'block', color: panelText }}>
                            Bar Height: <span style={{ fontWeight: '600' }}>{currentSection.settings.barHeight}px</span>
                          </label>
                          <input
                            type="range"
                            min="4"
                            max="20"
                            value={currentSection.settings.barHeight}
                            onChange={(e) => updateSectionSettings(currentSection.id, 'barHeight', parseInt(e.target.value))}
                            style={{ width: '100%' }}
                          />
                        </div>
                        <div style={{ marginTop: '0.75rem' }}>
                          <label style={{ fontSize: '0.7rem', marginBottom: '0.375rem', display: 'block', color: panelText }}>
                            Bar Style
                          </label>
                                                     <select
                             value={currentSection.settings.barStyle}
                             onChange={(e) => updateSectionSettings(currentSection.id, 'barStyle', e.target.value)}
                             style={{
                               width: '100%',
                               padding: '0.5rem',
                               borderRadius: '6px',
                               border: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
                               background: isDark ? 'rgba(255,255,255,0.05)' : 'white',
                               fontSize: '0.75rem',
                               color: panelText
                             }}
                           >
                             <option value="solid">Solid Color</option>
                             <option value="gradient">Gradient</option>
                           </select>
                         </div>
                       </>
                     )}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div style={{
          padding: '1.5rem',
          borderTop: `1px solid ${isDark ? 'rgba(255,255,255,0.1)' : '#e5e7eb'}`,
          background: isDark ? '#1e293b' : '#f8fafc',
          display: 'flex',
          gap: '1rem'
        }}>
          <button
            onClick={() => {
              setIsCustomizing(false);
              setPreviewMode(false);
              setSelectedSection(null);
              setSelectedText(null);
              setShowSaveNotification(true);
              setTimeout(() => setShowSaveNotification(false), 3000);
            }}
            style={{
              flex: 1,
              padding: '1rem',
              background: `linear-gradient(135deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`,
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              fontWeight: '600',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '0.5rem',
              fontSize: '0.9375rem',
              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
              transition: 'all 0.3s ease',
              position: 'relative',
              overflow: 'hidden'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)';
              e.currentTarget.style.boxShadow = '0 8px 20px rgba(0, 0, 0, 0.2)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
            }}
          >
            <Save size={18} />
            Save All Changes
            <div style={{
              position: 'absolute',
              top: '-50%',
              right: '-50%',
              width: '100%',
              height: '100%',
              background: 'rgba(255,255,255,0.2)',
              transform: 'rotate(45deg)',
              transition: 'all 0.6s ease'
            }} />
          </button>
          
          <button
            onClick={() => setPreviewMode(!previewMode)}
            style={{
              padding: '1rem 1.5rem',
              background: previewMode 
                ? profileTheme.primaryColor
                : 'transparent',
              color: previewMode 
                ? 'white'
                : profileTheme.primaryColor,
              border: `2px solid ${profileTheme.primaryColor}`,
              borderRadius: '10px',
              fontWeight: '600',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '0.5rem',
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => {
              if (!previewMode) {
                e.currentTarget.style.background = `${profileTheme.primaryColor}10`;
              }
            }}
            onMouseOut={(e) => {
              if (!previewMode) {
                e.currentTarget.style.background = 'transparent';
              }
            }}
          >
            {previewMode ? <Eye size={18} /> : <EyeOff size={18} />}
          </button>
        </div>
      </div>
    );
  };

  // Helper functions
  const getBorderRadius = (custom) => {
    if (custom) return custom;
    const radiusMap = {
      none: '0px',
      small: '8px',
      rounded: '16px',
      large: '24px'
    };
    return radiusMap[profileTheme.borderRadius] || '16px';
  };

  const getShadowStyle = () => {
    const shadowMap = {
      none: 'none',
      subtle: '0 2px 8px rgba(0, 0, 0, 0.06)',
      medium: '0 8px 24px rgba(0, 0, 0, 0.12)',
      strong: '0 16px 40px rgba(0, 0, 0, 0.18)'
    };
    return shadowMap[profileTheme.shadowStyle] || 'none';
  };

  const getThemeStyles = () => {
    return {
      '--primary-color': profileTheme.primaryColor,
      '--secondary-color': profileTheme.secondaryColor,
      '--accent-color': profileTheme.accentColor,
      '--bg-color': profileTheme.backgroundColor,
      '--heading-color': profileTheme.headingColor,
      '--paragraph-color': profileTheme.paragraphColor,
      backgroundColor: profileTheme.backgroundColor,
      color: profileTheme.paragraphColor,
      fontFamily: profileTheme.bodyFont,
      minHeight: '100vh',
      position: 'relative',
      transition: `all ${profileTheme.transitionSpeed} ease`
    };
  };

  // Main render
  return (
    <div style={getThemeStyles()}>
      {/* Global Typography Styles */}
      <style>{`
        * {
          font-family: ${profileTheme.fontFamily || profileTheme.bodyFont}, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif !important;
        }
        h1, h2, h3, h4, h5, h6 {
          font-family: ${profileTheme.headingFont || profileTheme.fontFamily || profileTheme.bodyFont}, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif !important;
          color: ${profileTheme.headingColor} !important;
          text-align: ${profileTheme.textAlign || 'left'} !important;
          font-weight: ${profileTheme.fontWeight || 'normal'} !important;
          font-style: ${profileTheme.fontStyle || 'normal'} !important;
          text-decoration: ${profileTheme.textDecoration || 'none'} !important;
        }
        p, span, div, label, input, textarea, button, li {
          font-family: ${profileTheme.fontFamily || profileTheme.bodyFont}, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif !important;
          text-align: ${profileTheme.textAlign || 'left'} !important;
          font-weight: ${profileTheme.fontWeight || 'normal'} !important;
          font-style: ${profileTheme.fontStyle || 'normal'} !important;
          text-decoration: ${profileTheme.textDecoration || 'none'} !important;
        }
        .section-content * {
          text-align: ${profileTheme.textAlign || 'left'} !important;
          font-weight: ${profileTheme.fontWeight || 'normal'} !important;
          font-style: ${profileTheme.fontStyle || 'normal'} !important;
          text-decoration: ${profileTheme.textDecoration || 'none'} !important;
        }
      `}</style>

      {/* Save Notification */}
      {showSaveNotification && (
        <div style={{
          position: 'fixed',
          top: '2rem',
          left: '50%',
          transform: 'translateX(-50%)',
          background: '#22c55e',
          color: 'white',
          padding: '1rem 2rem',
          borderRadius: '12px',
          display: 'flex',
          alignItems: 'center',
          gap: '0.75rem',
          fontSize: '0.9375rem',
          fontWeight: '500',
          boxShadow: '0 10px 30px rgba(34, 197, 94, 0.3)',
          zIndex: 2000,
          animation: 'slideDown 0.5s ease, slideUp 0.5s ease 2.5s'
        }}>
          <Check size={20} />
          Profile saved successfully!
        </div>
      )}
      
      <div style={{ position: 'relative', zIndex: 2 }}>
        {/* Preview Mode Header */}
        {previewMode && (
          <div style={{
            background: `linear-gradient(90deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`,
            color: 'white',
            padding: '1rem',
            textAlign: 'center',
            fontSize: '0.875rem',
            fontWeight: '600',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '0.5rem',
            boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
          }}>
            <Eye size={18} />
            Preview Mode - This is how others will see your profile
          </div>
        )}

        {/* Main Action Buttons */}
        {!isCustomizing && (
          <div style={{
            position: 'fixed',
            bottom: '2rem',
            right: '2rem',
            display: 'flex',
            flexDirection: 'column',
            gap: '1rem',
            zIndex: 100
          }}>
            <button
              onClick={() => setIsCustomizing(true)}
              style={{
                background: `linear-gradient(135deg, ${profileTheme.primaryColor}, ${profileTheme.secondaryColor})`,
                color: 'white',
                border: 'none',
                padding: '1.25rem 1.75rem',
                borderRadius: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '0.75rem',
                boxShadow: '0 10px 30px rgba(0, 0, 0, 0.2)',
                transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                fontSize: '1rem',
                position: 'relative',
                overflow: 'hidden'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px) scale(1.05)';
                e.currentTarget.style.boxShadow = '0 15px 40px rgba(0, 0, 0, 0.3)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0) scale(1)';
                e.currentTarget.style.boxShadow = '0 10px 30px rgba(0, 0, 0, 0.2)';
              }}
            >
              <Wand2 size={20} />
              Customize Profile
              <Sparkles size={16} style={{ position: 'absolute', top: '0.5rem', right: '0.5rem', opacity: 0.6 }} />
            </button>
            
            <button
              style={{
                background: 'rgba(255, 255, 255, 0.9)',
                color: profileTheme.primaryColor,
                border: `2px solid ${profileTheme.primaryColor}`,
                padding: '0.75rem',
                borderRadius: '12px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
                transition: 'all 0.3s ease'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.background = profileTheme.primaryColor;
                e.currentTarget.style.color = 'white';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.9)';
                e.currentTarget.style.color = profileTheme.primaryColor;
              }}
            >
              <Share2 size={18} />
            </button>
          </div>
        )}

        {/* Profile Content */}
        <div style={{
          padding: isCustomizing ? (window.innerWidth < 768 ? '1rem' : '1.5rem') : profileTheme.sectionSpacing,
          maxWidth: isCustomizing ? 'none' : '1200px',
          margin: isCustomizing ? '0' : '0 auto',
          position: 'relative',
          transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
          transform: isCustomizing ? 
            (window.innerWidth < 768 ? 'scale(1)' : 'translateX(-20px) scale(1)') : 
            'translateX(0) scale(1)',
          width: isCustomizing ? 
            (window.innerWidth < 768 ? '100%' : 'calc(100vw - min(500px, 42vw))') : '100%',
          marginRight: isCustomizing ? 
            (window.innerWidth < 768 ? '0' : 'min(500px, 42vw)') : 'auto',
          opacity: 1,
          pointerEvents: 'auto',
          minHeight: '100vh',
          boxSizing: 'border-box',
          overflow: isCustomizing ? 'visible' : 'initial'
        }}>
          {/* Render all sections in order */}
          {[...sections, ...customSections]
            .filter(section => previewMode ? section.visible : true)
            .sort((a, b) => a.order - b.order)
            .map(section => (
              <Section key={section.id} section={section} isEditing={isCustomizing && !previewMode} />
            ))}
        </div>
      </div>

      {/* Overlay for mobile when panel is open */}
      {isCustomizing && window.innerWidth < 768 && (
        <div
          style={{
            position: 'fixed',
            inset: 0,
            background: 'rgba(0, 0, 0, 0.3)',
            zIndex: 999,
            display: 'block'
          }}
          onClick={() => setIsCustomizing(false)}
        />
      )}

      {/* Customization Panel */}
      <CustomizationPanel />
      
      {/* Background Animation */}
      {profileTheme.backgroundAnimation && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          pointerEvents: 'none',
          zIndex: 1,
          overflow: 'hidden'
        }}>
          {Array.from({ length: 15 }, (_, i) => (
            <div
              key={i}
              style={{
                position: 'absolute',
                fontSize: profileTheme.animationType === 'bubbles' ? '2rem' : '1.5rem',
                opacity: 0.7,
                animation: `float${i % 3} ${8 + (i % 5)}s infinite ease-in-out`,
                left: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 8}s`
              }}
            >
              {profileTheme.animationType === 'hearts' && '❤️'}
              {profileTheme.animationType === 'stars' && '⭐'}
              {profileTheme.animationType === 'bubbles' && '🫧'}
              {profileTheme.animationType === 'snowflakes' && '❄️'}
              {profileTheme.animationType === 'confetti' && ['🎊', '🎉', '🎈'][i % 3]}
              {profileTheme.animationType === 'flowers' && ['🌸', '🌺', '🌻', '🌷'][i % 4]}
              {profileTheme.animationType === 'sparkles' && '✨'}
            </div>
          ))}
        </div>
      )}
      
      {/* Global Styles */}
      <style>{`
        @keyframes slideDown {
          from {
            transform: translate(-50%, -100%);
            opacity: 0;
          }
          to {
            transform: translate(-50%, 0);
            opacity: 1;
          }
        }
        @keyframes slideUp {
          from {
            transform: translate(-50%, 0);
            opacity: 1;
          }
          to {
            transform: translate(-50%, -100%);
            opacity: 0;
          }
        }
        
        @keyframes float0 {
          0%, 100% { transform: translateY(100vh) rotate(0deg); }
          50% { transform: translateY(-10vh) rotate(180deg); }
        }
        @keyframes float1 {
          0%, 100% { transform: translateY(100vh) rotate(0deg) scale(0.8); }
          50% { transform: translateY(-5vh) rotate(360deg) scale(1.2); }
        }
        @keyframes float2 {
          0%, 100% { transform: translateY(100vh) rotate(0deg) translateX(0); }
          25% { transform: translateY(75vh) rotate(90deg) translateX(20px); }
          50% { transform: translateY(50vh) rotate(180deg) translateX(-20px); }
          75% { transform: translateY(25vh) rotate(270deg) translateX(10px); }
        }
      `}</style>
    </div>
  );
};

export default Profile;